{"version":3,"file":"trim-value-accessor.js","sourceRoot":"","sources":["../../../../../../libs/common/src/lib/directives/trim-value-accessor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AACnG,OAAO,EAAE,iBAAiB,EAAwB,MAAM,gBAAgB,CAAC;AACzE,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;;AAE5B,MAAM,mBAAmB,GAAQ;IAC/B,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,GAAG,EAAE,CAAC,0BAA0B,CAAC;IACzD,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF;;;;GAIG;AAcH,mDAAmD;AACnD,MAAM,OAAO,0BAA0B;IAiBrC,YAA+B,QAAmB,EAAsB,UAAsB;QAV9F,eAAU,GAAG,CAAC,GAAW,EAAE,EAAE;YAC3B,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAChD,CAAC,CAAC;QAGF,aAAQ,GAAG,CAAC,GAAW,EAAE,EAAE;YACzB,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAChD,IAAI,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC,CAAC;QAcF,aAAQ,GAAG,CAAC,CAAM,EAAE,EAAE;YACpB,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;QAEF,cAAS,GAAG,GAAG,EAAE;YACf,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;QAjBA,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;QAChC,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;IACtC,CAAC;IAED,UAAU,CAAC,KAAU;QACnB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;YACnD,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SAC9F;IACH,CAAC;IAUD,gBAAgB,CAAC,EAAoB;QACnC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACrB,CAAC;IACD,iBAAiB,CAAC,EAAc;QAC9B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,gBAAgB,CAAC,UAAmB;QAClC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;IACjG,CAAC;;wHA9CU,0BAA0B,kBAiBjB,SAAS,aAA+B,UAAU;4GAjB3D,0BAA0B,2vBAH1B,CAAC,mBAAmB,CAAC;4FAGrB,0BAA0B;kBAdtC,SAAS;mBAAC;oBACT,+CAA+C;oBAC/C,QAAQ,EAAE;;;;;;;;GAQT;oBACD,SAAS,EAAE,CAAC,mBAAmB,CAAC;iBACjC;;0BAmBc,MAAM;2BAAC,SAAS;;0BAAwB,MAAM;2BAAC,UAAU;4CAVtE,UAAU;sBADT,YAAY;uBAAC,OAAO,EAAE,CAAC,qBAAqB,CAAC;gBAM9C,QAAQ;sBADP,YAAY;uBAAC,MAAM,EAAE,CAAC,qBAAqB,CAAC","sourcesContent":["import { Directive, HostListener, forwardRef, Inject, Renderer2, ElementRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { noop } from 'rxjs';\n\nconst TRIM_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TrimValueAccessorDirective),\n  multi: true,\n};\n\n/**\n * The trim accessor for writing trimmed value and listening to changes that is\n * used by the {@link NgModel}, {@link FormControlDirective}, and\n * {@link FormControlName} directives.\n */\n@Directive({\n  // eslint:disable-next-line: directive-selector\n  selector: `\n    input:not([type=checkbox]):not([type=radio]):not([type=password]):not([readonly]):not(.ng-trim-ignore)[formControlName],\n    input:not([type=checkbox]):not([type=radio]):not([type=password]):not([readonly]):not(.ng-trim-ignore)[formControl],\n    input:not([type=checkbox]):not([type=radio]):not([type=password]):not([readonly]):not(.ng-trim-ignore)[ngModel],\n    textarea:not([readonly]):not(.ng-trim-ignore)[formControlName],\n    textarea:not([readonly]):not(.ng-trim-ignore)[formControl],\n    textarea:not([readonly]):not(.ng-trim-ignore)[ngModel],\n    :not([readonly]):not(.ng-trim-ignore)[ngDefaultControl]\n  `,\n  providers: [TRIM_VALUE_ACCESSOR],\n})\n// tslint:disable-next-line: directive-class-suffix\nexport class TrimValueAccessorDirective implements ControlValueAccessor {\n  // Source services to modify elements.\n  private _sourceRenderer: Renderer2;\n  private _sourceElementRef: ElementRef;\n  private _value!: string;\n\n  @HostListener('input', ['$event.target.value'])\n  ngOnChange = (val: string) => {\n    this.onChange(val != null ? val.trim() : val);\n  };\n\n  @HostListener('blur', ['$event.target.value'])\n  ngOnBlur = (val: string) => {\n    this.writeValue(val != null ? val.trim() : val);\n    this.onTouched();\n  };\n\n  constructor(@Inject(Renderer2) renderer: Renderer2, @Inject(ElementRef) elementRef: ElementRef) {\n    this._sourceRenderer = renderer;\n    this._sourceElementRef = elementRef;\n  }\n\n  writeValue(value: any): void {\n    if (typeof value === 'string') {\n      this._value = value != null ? value.trim() : value;\n      this._sourceRenderer.setProperty(this._sourceElementRef.nativeElement, 'value', this._value);\n    }\n  }\n\n  onChange = (_: any) => {\n    noop();\n  };\n\n  onTouched = () => {\n    noop();\n  };\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._sourceRenderer.setProperty(this._sourceElementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n"]}