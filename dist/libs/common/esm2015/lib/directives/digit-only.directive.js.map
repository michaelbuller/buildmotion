{"version":3,"file":"digit-only.directive.js","sourceRoot":"","sources":["../../../../../../libs/common/src/lib/directives/digit-only.directive.ts"],"names":[],"mappings":"AAAA,uDAAuD;AACvD,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;;AAKpE,MAAM,OAAO,kBAAkB;IAG7B,YAAmB,EAAc;QAAd,OAAE,GAAF,EAAE,CAAY;QAFzB,mBAAc,GAAG,CAAC,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QAG7I,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC,aAAa,CAAC;IACvC,CAAC;IAGD,SAAS,CAAC,CAAM;QACd,IAAI,CAAC,YAAY,aAAa;YAC5B,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,yDAAyD;YACpG,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,IAAI,gBAAgB;YACzD,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,IAAI,gBAAgB;YACzD,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,IAAI,gBAAgB;YACzD,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,IAAI,gBAAgB;YACzD,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,IAAI,qBAAqB;YAC9D,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,IAAI,qBAAqB;YAC9D,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,IAAI,qBAAqB;YAC9D,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,qBAAqB;UAC3D;YACA,mCAAmC;YACnC,OAAO;SACR;QACD,mDAAmD;QACnD,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;YACxB,CAAC,CAAC,cAAc,EAAE,CAAC;SACpB;IACH,CAAC;;gHA3BU,kBAAkB;oGAAlB,kBAAkB;4FAAlB,kBAAkB;kBAH9B,SAAS;mBAAC;oBACT,QAAQ,EAAE,0BAA0B;iBACrC;iGASC,SAAS;sBADR,YAAY;uBAAC,SAAS,EAAE,CAAC,QAAQ,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[buildmotionDigitalOnly]',\n})\nexport class DigitOnlyDirective {\n  private navigationKeys = ['Backspace', 'Delete', 'Tab', 'Escape', 'Enter', 'Home', 'End', 'ArrowLeft', 'ArrowRight', 'Clear', 'Copy', 'Paste'];\n  inputElement: HTMLElement;\n  constructor(public el: ElementRef) {\n    this.inputElement = el.nativeElement;\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: any) {\n    if (e instanceof KeyboardEvent &&\n      this.navigationKeys.indexOf(e.key) > -1 || // Allow: navigation keys: backspace, delete, arrows etc.\n      (e.key === 'a' && e.ctrlKey === true) || // Allow: Ctrl+A\n      (e.key === 'c' && e.ctrlKey === true) || // Allow: Ctrl+C\n      (e.key === 'v' && e.ctrlKey === true) || // Allow: Ctrl+V\n      (e.key === 'x' && e.ctrlKey === true) || // Allow: Ctrl+X\n      (e.key === 'a' && e.metaKey === true) || // Allow: Cmd+A (Mac)\n      (e.key === 'c' && e.metaKey === true) || // Allow: Cmd+C (Mac)\n      (e.key === 'v' && e.metaKey === true) || // Allow: Cmd+V (Mac)\n      (e.key === 'x' && e.metaKey === true) // Allow: Cmd+X (Mac)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n    // Ensure that it is a number and stop the keypress\n    if (isNaN(Number(e.key))) {\n      e.preventDefault();\n    }\n  }\n}\n"]}