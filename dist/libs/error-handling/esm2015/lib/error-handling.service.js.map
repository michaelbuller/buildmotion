{"version":3,"file":"error-handling.service.js","sourceRoot":"","sources":["../../../../../libs/error-handling/src/lib/error-handling.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler, Injectable } from '@angular/core';\nimport { ConfigurationService, ErrorHandlingConfig, IConfiguration } from '@buildmotion/configuration';\nimport { LoggingService, Severity } from '@buildmotion/logging';\nimport { noop } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ErrorHandlingService extends ErrorHandler {\n  serviceName = 'ErrorHandlingService';\n  config!: ErrorHandlingConfig;\n  hasSettings = false;\n\n  constructor(private configService: ConfigurationService, private loggingService: LoggingService) {\n    super();\n\n    this.init();\n  }\n\n  init() {\n    // Use to provide default settings for error handling processing.\n    this.config = new ErrorHandlingConfig();\n    this.config = {\n      applicationName: 'Angular',\n      includeDefaultErrorHandling: true,\n    };\n    this.config.applicationName = 'ErrorHandlerService';\n    this.config.includeDefaultErrorHandling = false;\n    this.configService.settings$.pipe(take(1)).subscribe((settings) => this.handleSettings(settings));\n  }\n\n  handleSettings(settings: IConfiguration) {\n    if (settings && settings.errorHandlingConfig) {\n      this.config = settings.errorHandlingConfig;\n      this.hasSettings = true;\n\n      this.loggingService.log(this.config.applicationName, Severity.Information, `Application [ErrorHandler] using configuration settings.`);\n    }\n  }\n\n  /**\n   * Use to handle generalized [Error] items or errors from HTTP/Web\n   * APIs [HttpErrorResponse].\n   *\n   * @param error\n   */\n  handleError(error: Error | HttpErrorResponse): void {\n    if (this.config.includeDefaultErrorHandling) {\n      // use the [super] call to keep default error handling functionality --> console;\n      super.handleError(error);\n    }\n\n    if (this.hasSettings) {\n      // A. HANDLE ERRORS FROM HTTP\n      if (error instanceof HttpErrorResponse) {\n        if (error.error instanceof ErrorEvent) {\n          // A.1: A client-side or network error occurred. Handle it accordingly.\n          const formattedError = `${error.name}; ${error.message}`;\n          this.loggingService.log(this.config.applicationName, Severity.Error, `${formattedError}`);\n        } else {\n          // A.2: The API returned an unsuccessful response (i.e., 400, 401, 403, etc.).\n          /**\n           * The [HttpService] should return a response that is consumable by the caller\n           * of the API. The response should include relevant information and error messages\n           * in a format that is known and consumable by the caller of the API.\n           */\n          noop();\n        }\n      } else {\n        // B. HANDLE A GENERALIZED ERROR FROM THE APPLICATION/CLIENT;\n        const formattedError = `Error: ${error.name}; Message: ${error.message}; Stack: ${error.stack ?? 'Stack trace not available.'}`;\n        this.loggingService.log(this.config.applicationName, Severity.Error, `${formattedError}`);\n      }\n    }\n  }\n}\n"]}