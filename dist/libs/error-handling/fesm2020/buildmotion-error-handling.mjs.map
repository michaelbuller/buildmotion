{"version":3,"file":"buildmotion-error-handling.mjs","sources":["../../../../libs/error-handling/src/lib/error-handling.module.ts","../../../../libs/error-handling/src/lib/error-handling.service.ts","../../../../libs/error-handling/src/buildmotion-error-handling.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n})\nexport class ErrorHandlingModule {}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler, Injectable } from '@angular/core';\nimport { ConfigurationService, ErrorHandlingConfig, IConfiguration } from '@buildmotion/configuration';\nimport { LoggingService, Severity } from '@buildmotion/logging';\nimport { noop } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ErrorHandlingService extends ErrorHandler {\n  serviceName = 'ErrorHandlingService';\n  config!: ErrorHandlingConfig;\n  hasSettings = false;\n\n  constructor(private configService: ConfigurationService, private loggingService: LoggingService) {\n    super();\n\n    this.init();\n  }\n\n  init() {\n    // Use to provide default settings for error handling processing.\n    this.config = new ErrorHandlingConfig();\n    this.config = {\n      applicationName: 'Angular',\n      includeDefaultErrorHandling: true,\n    };\n    this.config.applicationName = 'ErrorHandlerService';\n    this.config.includeDefaultErrorHandling = false;\n    this.configService.settings$.pipe(take(1)).subscribe((settings) => this.handleSettings(settings));\n  }\n\n  handleSettings(settings: IConfiguration) {\n    if (settings && settings.errorHandlingConfig) {\n      this.config = settings.errorHandlingConfig;\n      this.hasSettings = true;\n\n      this.loggingService.log(this.config.applicationName, Severity.Information, `Application [ErrorHandler] using configuration settings.`);\n    }\n  }\n\n  /**\n   * Use to handle generalized [Error] items or errors from HTTP/Web\n   * APIs [HttpErrorResponse].\n   *\n   * @param error\n   */\n  override handleError(error: Error | HttpErrorResponse): void {\n    if (this.config.includeDefaultErrorHandling) {\n      // use the [super] call to keep default error handling functionality --> console;\n      super.handleError(error);\n    }\n\n    if (this.hasSettings) {\n      // A. HANDLE ERRORS FROM HTTP\n      if (error instanceof HttpErrorResponse) {\n        if (error.error instanceof ErrorEvent) {\n          // A.1: A client-side or network error occurred. Handle it accordingly.\n          const formattedError = `${error.name}; ${error.message}`;\n          this.loggingService.log(this.config.applicationName, Severity.Error, `${formattedError}`);\n        } else {\n          // A.2: The API returned an unsuccessful response (i.e., 400, 401, 403, etc.).\n          /**\n           * The [HttpService] should return a response that is consumable by the caller\n           * of the API. The response should include relevant information and error messages\n           * in a format that is known and consumable by the caller of the API.\n           */\n          noop();\n        }\n      } else {\n        // B. HANDLE A GENERALIZED ERROR FROM THE APPLICATION/CLIENT;\n        const formattedError = `Error: ${error.name}; Message: ${error.message}; Stack: ${error.stack ?? 'Stack trace not available.'}`;\n        this.loggingService.log(this.config.applicationName, Severity.Error, `${formattedError}`);\n      }\n    }\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;;;;;MAMa,mBAAmB,CAAA;;gHAAnB,mBAAmB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAnB,mBAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,mBAAmB,YAFpB,YAAY,CAAA,EAAA,CAAA,CAAA;AAEX,mBAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,mBAAmB,YAFpB,YAAY,CAAA,EAAA,CAAA,CAAA;2FAEX,mBAAmB,EAAA,UAAA,EAAA,CAAA;kBAH/B,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;oBACR,OAAO,EAAE,CAAC,YAAY,CAAC;AACxB,iBAAA,CAAA;;;ACKK,MAAO,oBAAqB,SAAQ,YAAY,CAAA;IAKpD,WAAoB,CAAA,aAAmC,EAAU,cAA8B,EAAA;AAC7F,QAAA,KAAK,EAAE,CAAC;QADU,IAAa,CAAA,aAAA,GAAb,aAAa,CAAsB;QAAU,IAAc,CAAA,cAAA,GAAd,cAAc,CAAgB;QAJ/F,IAAW,CAAA,WAAA,GAAG,sBAAsB,CAAC;QAErC,IAAW,CAAA,WAAA,GAAG,KAAK,CAAC;QAKlB,IAAI,CAAC,IAAI,EAAE,CAAC;KACb;IAED,IAAI,GAAA;;AAEF,QAAA,IAAI,CAAC,MAAM,GAAG,IAAI,mBAAmB,EAAE,CAAC;QACxC,IAAI,CAAC,MAAM,GAAG;AACZ,YAAA,eAAe,EAAE,SAAS;AAC1B,YAAA,2BAA2B,EAAE,IAAI;SAClC,CAAC;AACF,QAAA,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,qBAAqB,CAAC;AACpD,QAAA,IAAI,CAAC,MAAM,CAAC,2BAA2B,GAAG,KAAK,CAAC;QAChD,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;KACnG;AAED,IAAA,cAAc,CAAC,QAAwB,EAAA;AACrC,QAAA,IAAI,QAAQ,IAAI,QAAQ,CAAC,mBAAmB,EAAE;AAC5C,YAAA,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,mBAAmB,CAAC;AAC3C,YAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAExB,YAAA,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,QAAQ,CAAC,WAAW,EAAE,CAAA,wDAAA,CAA0D,CAAC,CAAC;AACxI,SAAA;KACF;AAED;;;;;AAKG;AACM,IAAA,WAAW,CAAC,KAAgC,EAAA;AACnD,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,2BAA2B,EAAE;;AAE3C,YAAA,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC1B,SAAA;QAED,IAAI,IAAI,CAAC,WAAW,EAAE;;YAEpB,IAAI,KAAK,YAAY,iBAAiB,EAAE;AACtC,gBAAA,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;;oBAErC,MAAM,cAAc,GAAG,CAAA,EAAG,KAAK,CAAC,IAAI,CAAA,EAAA,EAAK,KAAK,CAAC,OAAO,CAAA,CAAE,CAAC;AACzD,oBAAA,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,QAAQ,CAAC,KAAK,EAAE,GAAG,cAAc,CAAA,CAAE,CAAC,CAAC;AAC3F,iBAAA;AAAM,qBAAA;;AAEL;;;;AAIG;AACH,oBAAA,IAAI,EAAE,CAAC;AACR,iBAAA;AACF,aAAA;AAAM,iBAAA;;AAEL,gBAAA,MAAM,cAAc,GAAG,CAAA,OAAA,EAAU,KAAK,CAAC,IAAI,CAAc,WAAA,EAAA,KAAK,CAAC,OAAO,YAAY,KAAK,CAAC,KAAK,IAAI,4BAA4B,EAAE,CAAC;AAChI,gBAAA,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,QAAQ,CAAC,KAAK,EAAE,GAAG,cAAc,CAAA,CAAE,CAAC,CAAC;AAC3F,aAAA;AACF,SAAA;KACF;;iHAlEU,oBAAoB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,cAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAApB,oBAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,oBAAoB,cAFnB,MAAM,EAAA,CAAA,CAAA;2FAEP,oBAAoB,EAAA,UAAA,EAAA,CAAA;kBAHhC,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA,CAAA;;;ACTD;;AAEG;;;;"}