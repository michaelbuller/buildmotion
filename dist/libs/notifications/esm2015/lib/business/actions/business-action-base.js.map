{"version":3,"file":"business-action-base.js","sourceRoot":"","sources":["../../../../../../../libs/notifications/src/lib/business/actions/business-action-base.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAC;AAIrD;;;GAGG;AACH,MAAM,OAAgB,kBAAsB,SAAQ,UAAa;IAQ/D,YAAY,UAAkB;QAC5B,KAAK,EAAE,CAAC;QARV,qBAAgB,GAAG,IAAI,CAAC;QACxB,qBAAgB,GAAG,KAAK,CAAC;QAQvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACH,EAAE,CAAC,gBAAyC;QAC1C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,cAAc,GAAG,gBAAgB,CAAC,cAAc,CAAC;QACtD,IAAI,CAAC,cAAc,GAAG,gBAAgB,CAAC,cAAc,CAAC;QAEtD,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;CACF","sourcesContent":["import { ActionBase } from '@buildmotion/foundation';\nimport { ILoggingService } from '@buildmotion/logging';\nimport { BusinessProviderService } from './../business-provider.service';\n\n/**\n * A helper class to provide the action with required dependencies and\n * starting the execution of the action life-cycle pipeline.\n */\nexport abstract class BusinessActionBase<T> extends ActionBase<T> {\n  showRuleMessages = true;\n  hideRuleMessages = false;\n\n  businessProvider!: BusinessProviderService;\n  loggingService!: ILoggingService;\n  actionName: string;\n\n  constructor(actionName: string) {\n    super();\n    this.actionName = actionName;\n  }\n\n  /**\n   * Use the [Do] method to perform the action. Also uses [inversion of control]\n   * and provides the action the same instance of the [service context] and\n   * [logging service].\n   */\n  Do(businessProvider: BusinessProviderService) {\n    this.businessProvider = businessProvider;\n    this.serviceContext = businessProvider.serviceContext;\n    this.loggingService = businessProvider.loggingService;\n\n    this.execute();\n    return this.response;\n  }\n}\n"]}