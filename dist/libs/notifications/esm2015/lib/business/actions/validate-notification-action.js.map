{"version":3,"file":"validate-notification-action.js","sourceRoot":"","sources":["../../../../../../../libs/notifications/src/lib/business/actions/validate-notification-action.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AACpD,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,oBAAoB,EAAE,yBAAyB,EAAE,MAAM,2BAA2B,CAAC;AAC5F,OAAO,EAAE,EAAE,EAAE,MAAM,MAAM,CAAC;AAE1B,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAG5D,MAAM,OAAO,0BAA8B,SAAQ,kBAAqB;IAItE;;OAEG;IACH,YAAY,YAA0B;QACpC,KAAK,CAAC,4BAA4B,CAAC,CAAC;QANtC,uBAAkB,GAAG,KAAK,CAAC;QAOzB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAED;;;;;;OAMG;IACH,iBAAiB;QACf,IAAI,CAAC,iBAAiB;aACnB,OAAO,CAAC,IAAI,oBAAoB,CAAC,sBAAsB,EAAE,+CAA+C,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;aACtJ,OAAO,CACN,IAAI,yBAAyB,CAC3B,qBAAqB,EACrB,qEAAqE,EACrE,IAAI,CAAC,YAAY,CAAC,KAAK,EACvB,CAAC,EACD,EAAE,EACF,IAAI,CAAC,kBAAkB,CACxB,CACF;aACA,OAAO,CACN,IAAI,yBAAyB,CAC3B,2BAA2B,EAC3B,4EAA4E,EAC5E,IAAI,CAAC,YAAY,CAAC,WAAW,EAC7B,CAAC,EACD,GAAG,EACH,IAAI,CAAC,kBAAkB,CACxB,CACF;aACA,OAAO,CAAC,IAAI,oBAAoB,CAAC,qBAAqB,EAAE,iCAAiC,EAAE,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAExJ,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC1C,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAC5B,IAAI,yBAAyB,CAAC,gBAAgB,EAAE,qEAAqE,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,CAAC,CACrI,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,aAAa;QACX,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC;QACzC,MAAM,IAAI,GAAY,IAAI,CAAC,YAAY,CAAC;QACxC,MAAM,iBAAiB,GAAG,IAAI,WAAW,EAAK,CAAC;QAC/C,iBAAiB,CAAC,SAAS,GAAG,IAAI,CAAC;QACnC,iBAAiB,CAAC,IAAI,GAAM,IAAI,CAAC;QAEjC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,iBAAiB,CAAC,CAAC;IACxC,CAAC;CACF","sourcesContent":["import { ActionResult } from '@buildmotion/actions';\nimport { ApiResponse } from '@buildmotion/core';\nimport { IsNotNullOrUndefined, StringIsNotNullEmptyRange } from '@buildmotion/rules-engine';\nimport { of } from 'rxjs';\n\nimport { BusinessActionBase } from './business-action-base';\nimport { Notification } from '../../models/notification.model';\n\nexport class ValidateNotificationAction<T> extends BusinessActionBase<T> {\n  notification: Notification;\n  doNotDisplayToUser = false;\n\n  /**\n   * Use the constructor to provide any required inputs for the action.\n   */\n  constructor(notification: Notification) {\n    super('ValidateNotificationAction');\n    this.notification = notification;\n  }\n\n  /**\n   * Use this pipeline method as an opportunity to\n   * setup the action for processing, validating business rules, and/or\n   * performing other data validation.\n   *\n   * This method runs before [validationAction] and [performAction].\n   */\n  preValidateAction() {\n    this.validationContext\n      .addRule(new IsNotNullOrUndefined('FormMessageIsNotNull', 'The form message cannot be null or undefined.', this.notification, this.doNotDisplayToUser))\n      .addRule(\n        new StringIsNotNullEmptyRange(\n          'MessageTitleIsValid',\n          'The message title is not valid. Must be within 2 and 45 characters.',\n          this.notification.title,\n          2,\n          45,\n          this.doNotDisplayToUser\n        )\n      )\n      .addRule(\n        new StringIsNotNullEmptyRange(\n          'MessageDescriptionIsValid',\n          'The message description is not valid. Must be within 1 and 200 characters.',\n          this.notification.description,\n          1,\n          200,\n          this.doNotDisplayToUser\n        )\n      )\n      .addRule(new IsNotNullOrUndefined('NotifierTypeIsValid', 'The notifier type is not valid.', this.notification.notifierType, this.doNotDisplayToUser));\n\n    this.notification.messages.forEach((item) => {\n      this.validationContext.addRule(\n        new StringIsNotNullEmptyRange('MessageIsValid', 'The message item is not valid. Must be within 2 and 125 characters.', item, 2, 125)\n      );\n    });\n  }\n\n  /**\n   * Use this method to implement the action's business logic. This\n   * method will execute if there are no validation or business rule violations.\n   *\n   * Wraps the response in an ApiResponse to return the value using the action's [response] property.\n   */\n  performAction() {\n    this.actionResult = ActionResult.Success;\n    const data: unknown = this.notification;\n    const successApiMessage = new ApiResponse<T>();\n    successApiMessage.isSuccess = true;\n    successApiMessage.data = <T>data;\n\n    this.response = of(successApiMessage);\n  }\n}\n"]}