{"version":3,"file":"business-provider.service.js","sourceRoot":"","sources":["../../../../../../libs/notifications/src/lib/business/business-provider.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AACtE,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAGtD,OAAO,EAAE,yBAAyB,EAAE,MAAM,wCAAwC,CAAC;AACnF,OAAO,EAAE,0BAA0B,EAAE,MAAM,wCAAwC,CAAC;;;;AAKpF,MAAM,OAAO,uBAAwB,SAAQ,WAAW;IACtD,YAAY,MAAsB,EAAE,cAA8B;QAChE,KAAK,CAAC,6CAA6C,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;IAC/E,CAAC;IAED;;;OAGG;IACH,oBAAoB,CAAyB,OAAqB;QAChE,MAAM,MAAM,GAAG,IAAI,0BAA0B,CAAI,OAAO,CAAC,CAAC;QAC1D,OAAO,MAAM,CAAC,EAAE,mBAAM,IAAI,EAAG,CAAC;IAChC,CAAC;IAED,mBAAmB,CAAyB,WAA2B;QACrE,MAAM,MAAM,GAAG,IAAI,yBAAyB,CAAI,WAAW,CAAC,CAAC;QAC7D,OAAO,MAAM,CAAC,EAAE,mBAAM,IAAI,EAAG,CAAC;IAChC,CAAC;;qHAjBU,uBAAuB;yHAAvB,uBAAuB,cAFtB,MAAM;4FAEP,uBAAuB;kBAHnC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ApiResponse } from '@buildmotion/core';\nimport { ServiceBase, ServiceContext } from '@buildmotion/foundation';\nimport { LoggingService } from '@buildmotion/logging';\nimport { Observable } from 'rxjs';\nimport { Notification } from '../models/notification.model';\nimport { ValidateApiResponseAction } from './actions/validate-api-response-action';\nimport { ValidateNotificationAction } from './actions/validate-notification-action';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BusinessProviderService extends ServiceBase {\n  constructor(logger: LoggingService, serviceContext: ServiceContext) {\n    super('NotificationService.BusinessProviderService', logger, serviceContext);\n  }\n\n  /**\n   * Use to execute one or more actions to process the business operation.\n   * @param message a message to display form information to a user.\n   */\n  validateNotification<T extends Notification>(message: Notification): Observable<ApiResponse<T>> {\n    const action = new ValidateNotificationAction<T>(message);\n    return action.Do({ ...this });\n  }\n\n  validateApiResponse<T extends Notification>(apiResponse: ApiResponse<T>): Observable<ApiResponse<T>> {\n    const action = new ValidateApiResponseAction<T>(apiResponse);\n    return action.Do({ ...this });\n  }\n}\n"]}