{"version":3,"file":"notifications.service.js","sourceRoot":"","sources":["../../../../../libs/notifications/src/lib/notifications.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport { ServiceBase, ServiceContext, ServiceResponse } from '@buildmotion/foundation';\nimport { LoggingService, Severity } from '@buildmotion/logging';\nimport { ApiMessage, ApiResponse } from \"@buildmotion/core\";\nimport { Observable, ReplaySubject, Subscription } from 'rxjs';\nimport { BusinessProviderService } from './business/business-provider.service';\nimport { NotificationOptions } from './models/notification-options.model';\nimport { NotificationSeverity } from './models/notification-severity.enum';\nimport { Notification } from './models/notification.model';\nimport { NotifierType } from './models/notifier-type.enum';\n\n/**\n * The NotificationService is used to manage the publishing of notifications\n * messages for an application. This service will publish notifications, however,\n * the application will require a subscription or a notifier that will handle new\n * published notifications for display.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationService extends ServiceBase {\n  private addApiResponseSubscription!: Subscription;\n  private addMessageSubscription!: Subscription;\n  private apiMessagesSubject: ReplaySubject<ApiMessage[]> = new ReplaySubject<ApiMessage[]>(1);\n  private notificationsSubject$: ReplaySubject<Notification> = new ReplaySubject<Notification>(1);\n  private browserNotificationSubject$: ReplaySubject<boolean> = new ReplaySubject<boolean>();\n\n  public readonly apiMessages$: Observable<ApiMessage[]> = this.apiMessagesSubject.asObservable();\n  public readonly notifications$: Observable<Notification> = this.notificationsSubject$.asObservable();\n  public readonly browserNotification$: Observable<boolean> = this.browserNotificationSubject$.asObservable();\n\n  constructor(logger: LoggingService, @Optional() serviceContext: ServiceContext, private businessProvider: BusinessProviderService) {\n    super('NotificationService', logger, serviceContext);\n  }\n\n  /**\n   * Use to publish a new API error message.\n   * @param apiResponse\n   */\n  addApiResponse<T extends Notification>(apiResponse: ApiResponse<T>) {\n    this.addApiResponseSubscription = this.businessProvider.validateApiResponse<T>(apiResponse).subscribe(\n      (response) => this.handleAddApiResponse<T>(response),\n      (error) => this.handleServiceErrors(error),\n      () => this.finishAddApiRequest()\n    );\n  }\n\n  /**\n   * Use to add a new [Notification] to the service. Valid notifications\n   * are published to all subscribers (for display).\n   */\n  addMessage(message: Notification, options?: NotificationOptions): void {\n    this.addMessageSubscription = this.businessProvider.validateNotification<Notification>(message).subscribe(\n      (response) => this.handleAddMessage<Notification>(response, options),\n      (error) => this.handleServiceErrors(error),\n      () => this.finishAddMessageRequest()\n    );\n  }\n\n  /**\n   * Use to reset the notification service - removes all messages.\n   */\n  reset() {\n    this.notificationsSubject$.next(undefined);\n    this.apiMessagesSubject.next(undefined);\n  }\n\n  /**\n   * Use to handle the validation response for an API that contains\n   * error response messages to publish.\n   * @param response\n   */\n  private handleAddApiResponse<T>(response: ApiResponse<T>): void {\n    if (response instanceof ApiResponse) {\n      if (response.isSuccess && response instanceof ApiResponse) {\n        this.loggingService.log(this.serviceName, Severity.Information, `Preparing to notify [API Message] subscribers.`);\n        this.apiMessagesSubject.next(<any>response.data);\n      } else if (!response.isSuccess && response instanceof ApiResponse) {\n        this.handleServiceErrors(response);\n      }\n    }\n  }\n\n  /**\n   * Use to handle the response of a notification validation.\n   * @param response an ApiResponse<Notification> where the [Data] payload is of type [Notification]\n   *\n   */\n  private handleAddMessage<T extends Notification>(response: ApiResponse<T>, options?: NotificationOptions) {\n    if (response instanceof ApiResponse) {\n      if (response.isSuccess && response instanceof ApiResponse && response.data) {\n        const message: Notification = response.data;\n        this.loggingService.log(this.serviceName, Severity.Information, `Preparing to notify notification subscribers of new message: ${message.title}`);\n\n        if (message instanceof Notification && options) {\n          message.options = options;\n        }\n        this.notificationsSubject$.next(message);\n      } else if (!response.isSuccess && response instanceof ApiResponse) {\n        this.handleServiceErrors(response);\n      }\n    }\n  }\n\n  private handleServiceErrors(response: any) {\n    if (!response.IsSuccess && response instanceof ServiceResponse && response.Errors) {\n      const message = new Notification();\n      message.messages = [response.Message];\n      message.severity = NotificationSeverity.error;\n      message.notifierType = NotifierType.Toast;\n      message.title = response.Message;\n      message.description = response.Message;\n      this.loggingService.log(this.serviceName, Severity.Information, `Preparing to notify notification subscribers of new message: ${message.title}`);\n\n      this.notificationsSubject$.next(message);\n    }\n    this.loggingService.log(this.serviceName, Severity.Error, `Failed to process notification message. ${response}`);\n  }\n\n  /**\n   * Use to manage the subscription for processing a new notification message.\n   */\n  private finishAddMessageRequest(): void {\n    this.finishRequest(this.serviceName);\n    if (this.addMessageSubscription) {\n      this.addMessageSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Use to finish processing API messages.\n   * @param serviceName\n   */\n  private finishAddApiRequest(): void {\n    this.finishRequest(this.serviceName);\n    if (this.addApiResponseSubscription) {\n      this.addApiResponseSubscription.unsubscribe();\n    }\n  }\n}\n"]}