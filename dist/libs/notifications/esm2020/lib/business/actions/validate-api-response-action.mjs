import { ApiResponse } from '@buildmotion/core';
import { BusinessActionBase } from './business-action-base';
import { Severity } from '@buildmotion/logging';
import { IsNotNullOrUndefined, StringIsNotNullEmptyRange, Range, IsTrue } from '@buildmotion/rules-engine';
import { ActionResult } from '@buildmotion/actions';
import { of } from 'rxjs';
export class ValidateApiResponseAction extends BusinessActionBase {
    constructor(apiResponse) {
        super('ValidateApiResponseAction');
        this.apiResponse = apiResponse;
    }
    preValidateAction() {
        this.loggingService.log(this.actionName, Severity.Information, `Preparing to validate the API response for error messages.`);
        this.validationContext.addRule(new IsNotNullOrUndefined('ApiResponseIsValid', 'The API response cannot be null or undefined.', this.apiResponse, false));
        if (this.apiResponse) {
            this.validationContext.addRule(new IsNotNullOrUndefined('ApiMessagesNotNullUndefined', 'The API response messages is not valid. Cannot be null or undefined.', this.apiResponse.messages, false)).addRule(new IsTrue("ContainsValidMessage", 'The API response requires a valid message.', this.apiResponse.messages.length > 0, this.hideRuleMessages));
        }
        if (this.apiResponse && this.apiResponse.messages) {
            this.validationContext.addRule(new Range('MessagesLengthMin', 'The API response must contain at least one valid message item.', this.apiResponse.messages.length, 1, 99));
            this.apiResponse.messages.forEach((item) => {
                this.validationContext.addRule(new StringIsNotNullEmptyRange('MessageErrorCodeIsValid', 'The message does not contain a valid error code.', item.code, 1, 200));
            });
        }
    }
    performAction() {
        this.actionResult = ActionResult.Success;
        const result = this.apiResponse.messages;
        const successApiMessage = new ApiResponse();
        successApiMessage.isSuccess = true;
        successApiMessage.data = result;
        this.response = of(successApiMessage);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUtYXBpLXJlc3BvbnNlLWFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbm90aWZpY2F0aW9ucy9zcmMvbGliL2J1c2luZXNzL2FjdGlvbnMvdmFsaWRhdGUtYXBpLXJlc3BvbnNlLWFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSx5QkFBeUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDM0csT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFMUIsTUFBTSxPQUFPLHlCQUE2QixTQUFRLGtCQUFxQjtJQUNyRSxZQUFvQixXQUEyQjtRQUM3QyxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQURqQixnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7SUFFL0MsQ0FBQztJQUVRLGlCQUFpQjtRQUN4QixJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxXQUFXLEVBQUUsNERBQTRELENBQUMsQ0FBQztRQUM3SCxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksb0JBQW9CLENBQUMsb0JBQW9CLEVBQUUsK0NBQStDLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXpKLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUM1QixJQUFJLG9CQUFvQixDQUN0Qiw2QkFBNkIsRUFDN0Isc0VBQXNFLEVBQ3RFLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUN6QixLQUFLLENBQ04sQ0FDRixDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FDbEIsc0JBQXNCLEVBQ3RCLDRDQUE0QyxFQUM1QyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUNwQyxJQUFJLENBQUMsZ0JBQWdCLENBQ3RCLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFO1lBQ2pELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQzVCLElBQUksS0FBSyxDQUFDLG1CQUFtQixFQUFFLGdFQUFnRSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQzFJLENBQUM7WUFFRixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDekMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FDNUIsSUFBSSx5QkFBeUIsQ0FBQyx5QkFBeUIsRUFBRSxrREFBa0QsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FDaEksQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRVEsYUFBYTtRQUNwQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7UUFDekMsTUFBTSxNQUFNLEdBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUM7UUFDOUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLFdBQVcsRUFBSyxDQUFDO1FBQy9DLGlCQUFpQixDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDbkMsaUJBQWlCLENBQUMsSUFBSSxHQUFNLE1BQU0sQ0FBQztRQUVuQyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwaVJlc3BvbnNlIH0gZnJvbSAnQGJ1aWxkbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgQnVzaW5lc3NBY3Rpb25CYXNlIH0gZnJvbSAnLi9idXNpbmVzcy1hY3Rpb24tYmFzZSc7XG5pbXBvcnQgeyBTZXZlcml0eSB9IGZyb20gJ0BidWlsZG1vdGlvbi9sb2dnaW5nJztcbmltcG9ydCB7IElzTm90TnVsbE9yVW5kZWZpbmVkLCBTdHJpbmdJc05vdE51bGxFbXB0eVJhbmdlLCBSYW5nZSwgSXNUcnVlIH0gZnJvbSAnQGJ1aWxkbW90aW9uL3J1bGVzLWVuZ2luZSc7XG5pbXBvcnQgeyBBY3Rpb25SZXN1bHQgfSBmcm9tICdAYnVpbGRtb3Rpb24vYWN0aW9ucyc7XG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgY2xhc3MgVmFsaWRhdGVBcGlSZXNwb25zZUFjdGlvbjxUPiBleHRlbmRzIEJ1c2luZXNzQWN0aW9uQmFzZTxUPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBpUmVzcG9uc2U6IEFwaVJlc3BvbnNlPFQ+KSB7XG4gICAgc3VwZXIoJ1ZhbGlkYXRlQXBpUmVzcG9uc2VBY3Rpb24nKTtcbiAgfVxuXG4gIG92ZXJyaWRlIHByZVZhbGlkYXRlQWN0aW9uKCkge1xuICAgIHRoaXMubG9nZ2luZ1NlcnZpY2UubG9nKHRoaXMuYWN0aW9uTmFtZSwgU2V2ZXJpdHkuSW5mb3JtYXRpb24sIGBQcmVwYXJpbmcgdG8gdmFsaWRhdGUgdGhlIEFQSSByZXNwb25zZSBmb3IgZXJyb3IgbWVzc2FnZXMuYCk7XG4gICAgdGhpcy52YWxpZGF0aW9uQ29udGV4dC5hZGRSdWxlKG5ldyBJc05vdE51bGxPclVuZGVmaW5lZCgnQXBpUmVzcG9uc2VJc1ZhbGlkJywgJ1RoZSBBUEkgcmVzcG9uc2UgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLicsIHRoaXMuYXBpUmVzcG9uc2UsIGZhbHNlKSk7XG5cbiAgICBpZiAodGhpcy5hcGlSZXNwb25zZSkge1xuICAgICAgdGhpcy52YWxpZGF0aW9uQ29udGV4dC5hZGRSdWxlKFxuICAgICAgICBuZXcgSXNOb3ROdWxsT3JVbmRlZmluZWQoXG4gICAgICAgICAgJ0FwaU1lc3NhZ2VzTm90TnVsbFVuZGVmaW5lZCcsXG4gICAgICAgICAgJ1RoZSBBUEkgcmVzcG9uc2UgbWVzc2FnZXMgaXMgbm90IHZhbGlkLiBDYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuJyxcbiAgICAgICAgICB0aGlzLmFwaVJlc3BvbnNlLm1lc3NhZ2VzLFxuICAgICAgICAgIGZhbHNlXG4gICAgICAgIClcbiAgICAgICkuYWRkUnVsZShuZXcgSXNUcnVlKFxuICAgICAgICBcIkNvbnRhaW5zVmFsaWRNZXNzYWdlXCIsXG4gICAgICAgICdUaGUgQVBJIHJlc3BvbnNlIHJlcXVpcmVzIGEgdmFsaWQgbWVzc2FnZS4nLFxuICAgICAgICB0aGlzLmFwaVJlc3BvbnNlLm1lc3NhZ2VzLmxlbmd0aCA+IDAsXG4gICAgICAgIHRoaXMuaGlkZVJ1bGVNZXNzYWdlc1xuICAgICAgKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXBpUmVzcG9uc2UgJiYgdGhpcy5hcGlSZXNwb25zZS5tZXNzYWdlcykge1xuICAgICAgdGhpcy52YWxpZGF0aW9uQ29udGV4dC5hZGRSdWxlKFxuICAgICAgICBuZXcgUmFuZ2UoJ01lc3NhZ2VzTGVuZ3RoTWluJywgJ1RoZSBBUEkgcmVzcG9uc2UgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSB2YWxpZCBtZXNzYWdlIGl0ZW0uJywgdGhpcy5hcGlSZXNwb25zZS5tZXNzYWdlcy5sZW5ndGgsIDEsIDk5KVxuICAgICAgKTtcblxuICAgICAgdGhpcy5hcGlSZXNwb25zZS5tZXNzYWdlcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbkNvbnRleHQuYWRkUnVsZShcbiAgICAgICAgICBuZXcgU3RyaW5nSXNOb3ROdWxsRW1wdHlSYW5nZSgnTWVzc2FnZUVycm9yQ29kZUlzVmFsaWQnLCAnVGhlIG1lc3NhZ2UgZG9lcyBub3QgY29udGFpbiBhIHZhbGlkIGVycm9yIGNvZGUuJywgaXRlbS5jb2RlLCAxLCAyMDApXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBvdmVycmlkZSBwZXJmb3JtQWN0aW9uKCkge1xuICAgIHRoaXMuYWN0aW9uUmVzdWx0ID0gQWN0aW9uUmVzdWx0LlN1Y2Nlc3M7XG4gICAgY29uc3QgcmVzdWx0OiBhbnkgPSB0aGlzLmFwaVJlc3BvbnNlLm1lc3NhZ2VzO1xuICAgIGNvbnN0IHN1Y2Nlc3NBcGlNZXNzYWdlID0gbmV3IEFwaVJlc3BvbnNlPFQ+KCk7XG4gICAgc3VjY2Vzc0FwaU1lc3NhZ2UuaXNTdWNjZXNzID0gdHJ1ZTtcbiAgICBzdWNjZXNzQXBpTWVzc2FnZS5kYXRhID0gPFQ+cmVzdWx0O1xuXG4gICAgdGhpcy5yZXNwb25zZSA9IG9mKHN1Y2Nlc3NBcGlNZXNzYWdlKTtcbiAgfVxufVxuIl19