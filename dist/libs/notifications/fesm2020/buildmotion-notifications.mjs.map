{"version":3,"file":"buildmotion-notifications.mjs","sources":["../../../../libs/notifications/src/lib/notifications.module.ts","../../../../libs/notifications/src/lib/models/error-state.model.ts","../../../../libs/notifications/src/lib/models/error-state-operation.model.ts","../../../../libs/notifications/src/lib/models/notification-severity.enum.ts","../../../../libs/notifications/src/lib/models/notifier-type.enum.ts","../../../../libs/notifications/src/lib/models/notification.model.ts","../../../../libs/notifications/src/lib/models/notification-options.model.ts","../../../../libs/notifications/src/lib/business/actions/business-action-base.ts","../../../../libs/notifications/src/lib/business/actions/validate-api-response-action.ts","../../../../libs/notifications/src/lib/business/actions/validate-notification-action.ts","../../../../libs/notifications/src/lib/business/business-provider.service.ts","../../../../libs/notifications/src/lib/notifications.service.ts","../../../../libs/notifications/src/lib/notifications.service.mock.ts","../../../../libs/notifications/src/buildmotion-notifications.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      /* {path: '', pathMatch: 'full', component: InsertYourComponentHere} */\n    ]),\n  ],\n})\nexport class NotificationsModule {}\n","import { ErrorStateOperation } from './error-state-operation.model';\n\n/**\n * Use as the container for API error state management.\n */\nexport class ErrorState {\n  operation: ErrorStateOperation | undefined;\n}\n","/**\n * Use to define error state mappings for a specific API operation.\n */\nexport class ErrorStateOperation {\n  domain: string;\n  operation: string;\n  errors: Map<string, boolean> = new Map<string, boolean>();\n\n  constructor(operation: string, domain: string) {\n    this.operation = operation;\n    this.domain = domain;\n  }\n}\n","export enum NotificationSeverity {\n  information = 'information',\n  warning = 'warning',\n  error = 'error',\n  success = 'success',\n}\n","export enum NotifierType {\n  'Unknown' = 'Unknown',\n  'Banner' = 'Banner',\n  'Dialog' = 'Dialog',\n  'Snackbar' = 'Snackbar',\n  'Confirmation' = 'Confirmation',\n  'Toast' = 'Toast'\n}\n","import { NotificationOptions } from './notification-options.model';\nimport { NotificationSeverity } from './notification-severity.enum';\nimport { NotifierType } from './notifier-type.enum';\n\nexport class Notification {\n  title: string;\n  description: string;\n  messages: string[] = [];\n  severity: NotificationSeverity = NotificationSeverity.information;\n  notifierType?: NotifierType;\n  options?: NotificationOptions;\n\n  constructor(title?: string, description?: string, notifierType?: NotifierType, severity?: NotificationSeverity, messages?: string[], options?: NotificationOptions);\n  constructor(title: string, description?: string, notifierType?: NotifierType, severity?: NotificationSeverity, messages?: string[], options?: NotificationOptions);\n  constructor(title: string, description: string, notifierType?: NotifierType, severity?: NotificationSeverity, messages?: string[], options?: NotificationOptions);\n  constructor(title: string, description: string, notifierType: NotifierType, severity?: NotificationSeverity, messages?: string[], options?: NotificationOptions);\n  constructor(title: string, description: string, notifierType: NotifierType, severity: NotificationSeverity, messages?: string[], options?: NotificationOptions);\n  constructor(title: string, description: string, notifierType: NotifierType, severity: NotificationSeverity, messages: string[], options: NotificationOptions) {\n    this.title = title;\n    this.description = description;\n    this.messages = messages ? messages : [];\n    this.severity = severity ? severity : NotificationSeverity.information;\n    this.notifierType = notifierType ? notifierType : NotifierType.Unknown;\n    this.options = options;\n  }\n}\n","export class NotificationOptions {\n  cancelButtonText?: string;\n  actionButtonText?: string;\n\n  constructor(actionButtonText?: string, cancelButtonText?: string) {\n    this.actionButtonText = actionButtonText;\n    this.cancelButtonText = cancelButtonText;\n  }\n}\n","import { ActionBase } from '@buildmotion/foundation';\nimport { BusinessProviderService } from './../business-provider.service';\n\n/**\n * A helper class to provide the action with required dependencies and\n * starting the execution of the action life-cycle pipeline.\n */\nexport abstract class BusinessActionBase<T> extends ActionBase<T> {\n  showRuleMessages = true;\n  hideRuleMessages = false;\n\n  businessProvider!: BusinessProviderService;\n  // override loggingService!: ILoggingService;\n  // override actionName: string;\n\n  constructor(actionName: string) {\n    super();\n    this.actionName = actionName;\n  }\n\n  /**\n   * Use the [Do] method to perform the action. Also uses [inversion of control]\n   * and provides the action the same instance of the [service context] and\n   * [logging service].\n   */\n  Do(businessProvider: BusinessProviderService) {\n    this.businessProvider = businessProvider;\n    this.serviceContext = businessProvider.serviceContext;\n    this.loggingService = businessProvider.loggingService;\n\n    this.execute();\n    return this.response;\n  }\n}\n","import { ApiResponse } from '@buildmotion/core';\nimport { BusinessActionBase } from './business-action-base';\nimport { Severity } from '@buildmotion/logging';\nimport { IsNotNullOrUndefined, StringIsNotNullEmptyRange, Range, IsTrue } from '@buildmotion/rules-engine';\nimport { ActionResult } from '@buildmotion/actions';\nimport { of } from 'rxjs';\n\nexport class ValidateApiResponseAction<T> extends BusinessActionBase<T> {\n  constructor(private apiResponse: ApiResponse<T>) {\n    super('ValidateApiResponseAction');\n  }\n\n  override preValidateAction() {\n    this.loggingService.log(this.actionName, Severity.Information, `Preparing to validate the API response for error messages.`);\n    this.validationContext.addRule(new IsNotNullOrUndefined('ApiResponseIsValid', 'The API response cannot be null or undefined.', this.apiResponse, false));\n\n    if (this.apiResponse) {\n      this.validationContext.addRule(\n        new IsNotNullOrUndefined(\n          'ApiMessagesNotNullUndefined',\n          'The API response messages is not valid. Cannot be null or undefined.',\n          this.apiResponse.messages,\n          false\n        )\n      ).addRule(new IsTrue(\n        \"ContainsValidMessage\",\n        'The API response requires a valid message.',\n        this.apiResponse.messages.length > 0,\n        this.hideRuleMessages\n      ));\n    }\n\n    if (this.apiResponse && this.apiResponse.messages) {\n      this.validationContext.addRule(\n        new Range('MessagesLengthMin', 'The API response must contain at least one valid message item.', this.apiResponse.messages.length, 1, 99)\n      );\n\n      this.apiResponse.messages.forEach((item) => {\n        this.validationContext.addRule(\n          new StringIsNotNullEmptyRange('MessageErrorCodeIsValid', 'The message does not contain a valid error code.', item.code, 1, 200)\n        );\n      });\n    }\n  }\n\n  override performAction() {\n    this.actionResult = ActionResult.Success;\n    const result: any = this.apiResponse.messages;\n    const successApiMessage = new ApiResponse<T>();\n    successApiMessage.isSuccess = true;\n    successApiMessage.data = <T>result;\n\n    this.response = of(successApiMessage);\n  }\n}\n","import { ActionResult } from '@buildmotion/actions';\nimport { ApiResponse } from '@buildmotion/core';\nimport { IsNotNullOrUndefined, StringIsNotNullEmptyRange } from '@buildmotion/rules-engine';\nimport { of } from 'rxjs';\n\nimport { BusinessActionBase } from './business-action-base';\nimport { Notification } from '../../models/notification.model';\n\nexport class ValidateNotificationAction<T> extends BusinessActionBase<T> {\n  notification: Notification;\n  doNotDisplayToUser = false;\n\n  /**\n   * Use the constructor to provide any required inputs for the action.\n   */\n  constructor(notification: Notification) {\n    super('ValidateNotificationAction');\n    this.notification = notification;\n  }\n\n  /**\n   * Use this pipeline method as an opportunity to\n   * setup the action for processing, validating business rules, and/or\n   * performing other data validation.\n   *\n   * This method runs before [validationAction] and [performAction].\n   */\n  override preValidateAction() {\n    this.validationContext\n      .addRule(new IsNotNullOrUndefined('FormMessageIsNotNull', 'The form message cannot be null or undefined.', this.notification, this.doNotDisplayToUser))\n      .addRule(\n        new StringIsNotNullEmptyRange(\n          'MessageTitleIsValid',\n          'The message title is not valid. Must be within 2 and 45 characters.',\n          this.notification.title,\n          2,\n          45,\n          this.doNotDisplayToUser\n        )\n      )\n      .addRule(\n        new StringIsNotNullEmptyRange(\n          'MessageDescriptionIsValid',\n          'The message description is not valid. Must be within 1 and 200 characters.',\n          this.notification.description,\n          1,\n          200,\n          this.doNotDisplayToUser\n        )\n      )\n      .addRule(new IsNotNullOrUndefined('NotifierTypeIsValid', 'The notifier type is not valid.', this.notification.notifierType, this.doNotDisplayToUser));\n\n    this.notification.messages.forEach((item) => {\n      this.validationContext.addRule(\n        new StringIsNotNullEmptyRange('MessageIsValid', 'The message item is not valid. Must be within 2 and 125 characters.', item, 2, 125)\n      );\n    });\n  }\n\n  /**\n   * Use this method to implement the action's business logic. This\n   * method will execute if there are no validation or business rule violations.\n   *\n   * Wraps the response in an ApiResponse to return the value using the action's [response] property.\n   */\n  override performAction() {\n    this.actionResult = ActionResult.Success;\n    const data: unknown = this.notification;\n    const successApiMessage = new ApiResponse<T>();\n    successApiMessage.isSuccess = true;\n    successApiMessage.data = <T>data;\n\n    this.response = of(successApiMessage);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApiResponse } from '@buildmotion/core';\nimport { ServiceBase, ServiceContext } from '@buildmotion/foundation';\nimport { LoggingService } from '@buildmotion/logging';\nimport { Observable } from 'rxjs';\nimport { Notification } from '../models/notification.model';\nimport { ValidateApiResponseAction } from './actions/validate-api-response-action';\nimport { ValidateNotificationAction } from './actions/validate-notification-action';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BusinessProviderService extends ServiceBase {\n  constructor(logger: LoggingService, serviceContext: ServiceContext) {\n    super('NotificationService.BusinessProviderService', logger, serviceContext);\n  }\n\n  /**\n   * Use to execute one or more actions to process the business operation.\n   * @param message a message to display form information to a user.\n   */\n  validateNotification<T extends Notification>(message: Notification): Observable<ApiResponse<T>> {\n    const action = new ValidateNotificationAction<T>(message);\n    return action.Do({ ...this });\n  }\n\n  validateApiResponse<T extends Notification>(apiResponse: ApiResponse<T>): Observable<ApiResponse<T>> {\n    const action = new ValidateApiResponseAction<T>(apiResponse);\n    return action.Do({ ...this });\n  }\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { ServiceBase, ServiceContext, ServiceResponse } from '@buildmotion/foundation';\nimport { LoggingService, Severity } from '@buildmotion/logging';\nimport { ApiMessage, ApiResponse } from \"@buildmotion/core\";\nimport { Observable, ReplaySubject, Subscription } from 'rxjs';\nimport { BusinessProviderService } from './business/business-provider.service';\nimport { NotificationOptions } from './models/notification-options.model';\nimport { NotificationSeverity } from './models/notification-severity.enum';\nimport { Notification } from './models/notification.model';\nimport { NotifierType } from './models/notifier-type.enum';\n\n/**\n * The NotificationService is used to manage the publishing of notifications\n * messages for an application. This service will publish notifications, however,\n * the application will require a subscription or a notifier that will handle new\n * published notifications for display.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationService extends ServiceBase {\n  private addApiResponseSubscription!: Subscription;\n  private addMessageSubscription!: Subscription;\n  private apiMessagesSubject: ReplaySubject<ApiMessage[] | null> = new ReplaySubject<ApiMessage[] | null>(1);\n  private notificationsSubject$: ReplaySubject<Notification | null> = new ReplaySubject<Notification | null>(1);\n  private browserNotificationSubject$: ReplaySubject<boolean> = new ReplaySubject<boolean>();\n\n  public readonly apiMessages$: Observable<ApiMessage[] | null> = this.apiMessagesSubject.asObservable();\n  public readonly notifications$: Observable<Notification | null> = this.notificationsSubject$.asObservable();\n  public readonly browserNotification$: Observable<boolean> = this.browserNotificationSubject$.asObservable();\n\n  constructor(logger: LoggingService, @Optional() serviceContext: ServiceContext, private businessProvider: BusinessProviderService) {\n    super('NotificationService', logger, serviceContext);\n  }\n\n  /**\n   * Use to publish a new API error message.\n   * @param apiResponse\n   */\n  addApiResponse<T extends Notification>(apiResponse: ApiResponse<T>) {\n    this.addApiResponseSubscription = this.businessProvider.validateApiResponse<T>(apiResponse).subscribe(\n      (response) => this.handleAddApiResponse<T>(response),\n      (error) => this.handleServiceErrors(error),\n      () => this.finishAddApiRequest()\n    );\n  }\n\n  /**\n   * Use to add a new [Notification] to the service. Valid notifications\n   * are published to all subscribers (for display).\n   */\n  addMessage(message: Notification, options?: NotificationOptions): void {\n    this.addMessageSubscription = this.businessProvider.validateNotification<Notification>(message).subscribe(\n      (response) => this.handleAddMessage<Notification>(response, options),\n      (error) => this.handleServiceErrors(error),\n      () => this.finishAddMessageRequest()\n    );\n  }\n\n  /**\n   * Use to reset the notification service - removes all messages.\n   */\n  reset() {\n    this.notificationsSubject$.next(null);\n    this.apiMessagesSubject.next(null);\n  }\n\n  /**\n   * Use to handle the validation response for an API that contains\n   * error response messages to publish.\n   * @param response\n   */\n  private handleAddApiResponse<T>(response: ApiResponse<T>): void {\n    if (response instanceof ApiResponse) {\n      if (response.isSuccess && response instanceof ApiResponse) {\n        this.loggingService.log(this.serviceName, Severity.Information, `Preparing to notify [API Message] subscribers.`);\n        this.apiMessagesSubject.next(<any>response.data);\n      } else if (!response.isSuccess && response instanceof ApiResponse) {\n        this.handleServiceErrors(response);\n      }\n    }\n  }\n\n  /**\n   * Use to handle the response of a notification validation.\n   * @param response an ApiResponse<Notification> where the [Data] payload is of type [Notification]\n   *\n   */\n  private handleAddMessage<T extends Notification>(response: ApiResponse<T>, options?: NotificationOptions) {\n    if (response instanceof ApiResponse) {\n      if (response.isSuccess && response instanceof ApiResponse && response.data) {\n        const message: Notification = response.data;\n        this.loggingService.log(this.serviceName, Severity.Information, `Preparing to notify notification subscribers of new message: ${message.title}`);\n\n        if (message instanceof Notification && options) {\n          message.options = options;\n        }\n        this.notificationsSubject$.next(message);\n      } else if (!response.isSuccess && response instanceof ApiResponse) {\n        this.handleServiceErrors(response);\n      }\n    }\n  }\n\n  private handleServiceErrors(response: any) {\n    if (!response.IsSuccess && response instanceof ServiceResponse && response.Errors) {\n      const message = new Notification();\n      message.messages = [response.Message];\n      message.severity = NotificationSeverity.error;\n      message.notifierType = NotifierType.Toast;\n      message.title = response.Message;\n      message.description = response.Message;\n      this.loggingService.log(this.serviceName, Severity.Information, `Preparing to notify notification subscribers of new message: ${message.title}`);\n\n      this.notificationsSubject$.next(message);\n    }\n    this.loggingService.log(this.serviceName, Severity.Error, `Failed to process notification message. ${response}`);\n  }\n\n  /**\n   * Use to manage the subscription for processing a new notification message.\n   */\n  private finishAddMessageRequest(): void {\n    this.finishRequest(this.serviceName);\n    if (this.addMessageSubscription) {\n      this.addMessageSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Use to finish processing API messages.\n   * @param serviceName\n   */\n  private finishAddApiRequest(): void {\n    this.finishRequest(this.serviceName);\n    if (this.addApiResponseSubscription) {\n      this.addApiResponseSubscription.unsubscribe();\n    }\n  }\n}\n","export class NotificationServiceMock {\n  addApiResponse() {\n    return null;\n  }\n\n  addMessage() {\n    return null;\n  }\n\n  reset() {\n    return null;\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1","i3.BusinessProviderService"],"mappings":"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"}