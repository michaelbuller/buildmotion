{"version":3,"file":"buildmotion-notifications.js","sources":["../../../../libs/notifications/src/lib/notifications.module.ts","../../../../libs/notifications/src/lib/models/error-state.model.ts","../../../../libs/notifications/src/lib/models/error-state-operation.model.ts","../../../../libs/notifications/src/lib/models/notification-severity.enum.ts","../../../../libs/notifications/src/lib/models/notifier-type.enum.ts","../../../../libs/notifications/src/lib/models/notification.model.ts","../../../../libs/notifications/src/lib/models/notification-options.model.ts","../../../../libs/notifications/src/lib/business/actions/business-action-base.ts","../../../../libs/notifications/src/lib/business/actions/validate-api-response-action.ts","../../../../libs/notifications/src/lib/business/actions/validate-notification-action.ts","../../../../libs/notifications/src/lib/business/business-provider.service.ts","../../../../libs/notifications/src/lib/notifications.service.ts","../../../../libs/notifications/src/lib/notifications.service.mock.ts","../../../../libs/notifications/src/buildmotion-notifications.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      /* {path: '', pathMatch: 'full', component: InsertYourComponentHere} */\n    ]),\n  ],\n})\nexport class NotificationsModule {}\n","import { ErrorStateOperation } from './error-state-operation.model';\n\n/**\n * Use as the container for API error state management.\n */\nexport class ErrorState {\n  operation: ErrorStateOperation | undefined;\n}\n","/**\n * Use to define error state mappings for a specific API operation.\n */\nexport class ErrorStateOperation {\n  domain: string;\n  operation: string;\n  errors: Map<string, boolean> = new Map<string, boolean>();\n\n  constructor(operation: string, domain: string) {\n    this.operation = operation;\n    this.domain = domain;\n  }\n}\n","export enum NotificationSeverity {\n  information = 'information',\n  warning = 'warning',\n  error = 'error',\n  success = 'success',\n}\n","export enum NotifierType {\n  'Unknown' = 'Unknown',\n  'Banner' = 'Banner',\n  'Dialog' = 'Dialog',\n  'Snackbar' = 'Snackbar',\n  'Confirmation' = 'Confirmation',\n  'Toast' = 'Toast'\n}\n","import { NotificationOptions } from './notification-options.model';\nimport { NotificationSeverity } from './notification-severity.enum';\nimport { NotifierType } from './notifier-type.enum';\n\nexport class Notification {\n  title: string;\n  description: string;\n  messages: string[] = [];\n  severity: NotificationSeverity = NotificationSeverity.information;\n  notifierType?: NotifierType;\n  options?: NotificationOptions;\n\n  constructor(title?: string, description?: string, notifierType?: NotifierType, severity?: NotificationSeverity, messages?: string[], options?: NotificationOptions);\n  constructor(title: string, description?: string, notifierType?: NotifierType, severity?: NotificationSeverity, messages?: string[], options?: NotificationOptions);\n  constructor(title: string, description: string, notifierType?: NotifierType, severity?: NotificationSeverity, messages?: string[], options?: NotificationOptions);\n  constructor(title: string, description: string, notifierType: NotifierType, severity?: NotificationSeverity, messages?: string[], options?: NotificationOptions);\n  constructor(title: string, description: string, notifierType: NotifierType, severity: NotificationSeverity, messages?: string[], options?: NotificationOptions);\n  constructor(title: string, description: string, notifierType: NotifierType, severity: NotificationSeverity, messages: string[], options: NotificationOptions) {\n    this.title = title;\n    this.description = description;\n    this.messages = messages ? messages : [];\n    this.severity = severity ? severity : NotificationSeverity.information;\n    this.notifierType = notifierType ? notifierType : NotifierType.Unknown;\n    this.options = options;\n  }\n}\n","export class NotificationOptions {\n  cancelButtonText?: string;\n  actionButtonText?: string;\n\n  constructor(actionButtonText?: string, cancelButtonText?: string) {\n    this.actionButtonText = actionButtonText;\n    this.cancelButtonText = cancelButtonText;\n  }\n}\n","import { ActionBase } from '@buildmotion/foundation';\nimport { ILoggingService } from '@buildmotion/logging';\nimport { BusinessProviderService } from './../business-provider.service';\n\n/**\n * A helper class to provide the action with required dependencies and\n * starting the execution of the action life-cycle pipeline.\n */\nexport abstract class BusinessActionBase<T> extends ActionBase<T> {\n  showRuleMessages = true;\n  hideRuleMessages = false;\n\n  businessProvider!: BusinessProviderService;\n  loggingService!: ILoggingService;\n  actionName: string;\n\n  constructor(actionName: string) {\n    super();\n    this.actionName = actionName;\n  }\n\n  /**\n   * Use the [Do] method to perform the action. Also uses [inversion of control]\n   * and provides the action the same instance of the [service context] and\n   * [logging service].\n   */\n  Do(businessProvider: BusinessProviderService) {\n    this.businessProvider = businessProvider;\n    this.serviceContext = businessProvider.serviceContext;\n    this.loggingService = businessProvider.loggingService;\n\n    this.execute();\n    return this.response;\n  }\n}\n","import { ApiResponse } from '@buildmotion/core';\nimport { BusinessActionBase } from './business-action-base';\nimport { Severity } from '@buildmotion/logging';\nimport { IsNotNullOrUndefined, StringIsNotNullEmptyRange, Range, IsTrue } from '@buildmotion/rules-engine';\nimport { ActionResult } from '@buildmotion/actions';\nimport { of } from 'rxjs';\n\nexport class ValidateApiResponseAction<T> extends BusinessActionBase<T> {\n  constructor(private apiResponse: ApiResponse<T>) {\n    super('ValidateApiResponseAction');\n  }\n\n  preValidateAction() {\n    this.loggingService.log(this.actionName, Severity.Information, `Preparing to validate the API response for error messages.`);\n    this.validationContext.addRule(new IsNotNullOrUndefined('ApiResponseIsValid', 'The API response cannot be null or undefined.', this.apiResponse, false));\n\n    if (this.apiResponse) {\n      this.validationContext.addRule(\n        new IsNotNullOrUndefined(\n          'ApiMessagesNotNullUndefined',\n          'The API response messages is not valid. Cannot be null or undefined.',\n          this.apiResponse.messages,\n          false\n        )\n      ).addRule(new IsTrue(\n        \"ContainsValidMessage\",\n        'The API response requires a valid message.',\n        this.apiResponse.messages.length > 0,\n        this.hideRuleMessages\n      ));\n    }\n\n    if (this.apiResponse && this.apiResponse.messages) {\n      this.validationContext.addRule(\n        new Range('MessagesLengthMin', 'The API response must contain at least one valid message item.', this.apiResponse.messages.length, 1, 99)\n      );\n\n      this.apiResponse.messages.forEach((item) => {\n        this.validationContext.addRule(\n          new StringIsNotNullEmptyRange('MessageErrorCodeIsValid', 'The message does not contain a valid error code.', item.code, 1, 200)\n        );\n      });\n    }\n  }\n\n  performAction() {\n    this.actionResult = ActionResult.Success;\n    const result: any = this.apiResponse.messages;\n    const successApiMessage = new ApiResponse<T>();\n    successApiMessage.isSuccess = true;\n    successApiMessage.data = <T>result;\n\n    this.response = of(successApiMessage);\n  }\n}\n","import { ActionResult } from '@buildmotion/actions';\nimport { ApiResponse } from '@buildmotion/core';\nimport { IsNotNullOrUndefined, StringIsNotNullEmptyRange } from '@buildmotion/rules-engine';\nimport { of } from 'rxjs';\n\nimport { BusinessActionBase } from './business-action-base';\nimport { Notification } from '../../models/notification.model';\n\nexport class ValidateNotificationAction<T> extends BusinessActionBase<T> {\n  notification: Notification;\n  doNotDisplayToUser = false;\n\n  /**\n   * Use the constructor to provide any required inputs for the action.\n   */\n  constructor(notification: Notification) {\n    super('ValidateNotificationAction');\n    this.notification = notification;\n  }\n\n  /**\n   * Use this pipeline method as an opportunity to\n   * setup the action for processing, validating business rules, and/or\n   * performing other data validation.\n   *\n   * This method runs before [validationAction] and [performAction].\n   */\n  preValidateAction() {\n    this.validationContext\n      .addRule(new IsNotNullOrUndefined('FormMessageIsNotNull', 'The form message cannot be null or undefined.', this.notification, this.doNotDisplayToUser))\n      .addRule(\n        new StringIsNotNullEmptyRange(\n          'MessageTitleIsValid',\n          'The message title is not valid. Must be within 2 and 45 characters.',\n          this.notification.title,\n          2,\n          45,\n          this.doNotDisplayToUser\n        )\n      )\n      .addRule(\n        new StringIsNotNullEmptyRange(\n          'MessageDescriptionIsValid',\n          'The message description is not valid. Must be within 1 and 200 characters.',\n          this.notification.description,\n          1,\n          200,\n          this.doNotDisplayToUser\n        )\n      )\n      .addRule(new IsNotNullOrUndefined('NotifierTypeIsValid', 'The notifier type is not valid.', this.notification.notifierType, this.doNotDisplayToUser));\n\n    this.notification.messages.forEach((item) => {\n      this.validationContext.addRule(\n        new StringIsNotNullEmptyRange('MessageIsValid', 'The message item is not valid. Must be within 2 and 125 characters.', item, 2, 125)\n      );\n    });\n  }\n\n  /**\n   * Use this method to implement the action's business logic. This\n   * method will execute if there are no validation or business rule violations.\n   *\n   * Wraps the response in an ApiResponse to return the value using the action's [response] property.\n   */\n  performAction() {\n    this.actionResult = ActionResult.Success;\n    const data: unknown = this.notification;\n    const successApiMessage = new ApiResponse<T>();\n    successApiMessage.isSuccess = true;\n    successApiMessage.data = <T>data;\n\n    this.response = of(successApiMessage);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApiResponse } from '@buildmotion/core';\nimport { ServiceBase, ServiceContext } from '@buildmotion/foundation';\nimport { LoggingService } from '@buildmotion/logging';\nimport { Observable } from 'rxjs';\nimport { Notification } from '../models/notification.model';\nimport { ValidateApiResponseAction } from './actions/validate-api-response-action';\nimport { ValidateNotificationAction } from './actions/validate-notification-action';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BusinessProviderService extends ServiceBase {\n  constructor(logger: LoggingService, serviceContext: ServiceContext) {\n    super('NotificationService.BusinessProviderService', logger, serviceContext);\n  }\n\n  /**\n   * Use to execute one or more actions to process the business operation.\n   * @param message a message to display form information to a user.\n   */\n  validateNotification<T extends Notification>(message: Notification): Observable<ApiResponse<T>> {\n    const action = new ValidateNotificationAction<T>(message);\n    return action.Do({ ...this });\n  }\n\n  validateApiResponse<T extends Notification>(apiResponse: ApiResponse<T>): Observable<ApiResponse<T>> {\n    const action = new ValidateApiResponseAction<T>(apiResponse);\n    return action.Do({ ...this });\n  }\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { ServiceBase, ServiceContext, ServiceResponse } from '@buildmotion/foundation';\nimport { LoggingService, Severity } from '@buildmotion/logging';\nimport { ApiMessage, ApiResponse } from \"@buildmotion/core\";\nimport { Observable, ReplaySubject, Subscription } from 'rxjs';\nimport { BusinessProviderService } from './business/business-provider.service';\nimport { NotificationOptions } from './models/notification-options.model';\nimport { NotificationSeverity } from './models/notification-severity.enum';\nimport { Notification } from './models/notification.model';\nimport { NotifierType } from './models/notifier-type.enum';\n\n/**\n * The NotificationService is used to manage the publishing of notifications\n * messages for an application. This service will publish notifications, however,\n * the application will require a subscription or a notifier that will handle new\n * published notifications for display.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationService extends ServiceBase {\n  private addApiResponseSubscription!: Subscription;\n  private addMessageSubscription!: Subscription;\n  private apiMessagesSubject: ReplaySubject<ApiMessage[]> = new ReplaySubject<ApiMessage[]>(1);\n  private notificationsSubject$: ReplaySubject<Notification> = new ReplaySubject<Notification>(1);\n  private browserNotificationSubject$: ReplaySubject<boolean> = new ReplaySubject<boolean>();\n\n  public readonly apiMessages$: Observable<ApiMessage[]> = this.apiMessagesSubject.asObservable();\n  public readonly notifications$: Observable<Notification> = this.notificationsSubject$.asObservable();\n  public readonly browserNotification$: Observable<boolean> = this.browserNotificationSubject$.asObservable();\n\n  constructor(logger: LoggingService, @Optional() serviceContext: ServiceContext, private businessProvider: BusinessProviderService) {\n    super('NotificationService', logger, serviceContext);\n  }\n\n  /**\n   * Use to publish a new API error message.\n   * @param apiResponse\n   */\n  addApiResponse<T extends Notification>(apiResponse: ApiResponse<T>) {\n    this.addApiResponseSubscription = this.businessProvider.validateApiResponse<T>(apiResponse).subscribe(\n      (response) => this.handleAddApiResponse<T>(response),\n      (error) => this.handleServiceErrors(error),\n      () => this.finishAddApiRequest()\n    );\n  }\n\n  /**\n   * Use to add a new [Notification] to the service. Valid notifications\n   * are published to all subscribers (for display).\n   */\n  addMessage(message: Notification, options?: NotificationOptions): void {\n    this.addMessageSubscription = this.businessProvider.validateNotification<Notification>(message).subscribe(\n      (response) => this.handleAddMessage<Notification>(response, options),\n      (error) => this.handleServiceErrors(error),\n      () => this.finishAddMessageRequest()\n    );\n  }\n\n  /**\n   * Use to reset the notification service - removes all messages.\n   */\n  reset() {\n    this.notificationsSubject$.next(undefined);\n    this.apiMessagesSubject.next(undefined);\n  }\n\n  /**\n   * Use to handle the validation response for an API that contains\n   * error response messages to publish.\n   * @param response\n   */\n  private handleAddApiResponse<T>(response: ApiResponse<T>): void {\n    if (response instanceof ApiResponse) {\n      if (response.isSuccess && response instanceof ApiResponse) {\n        this.loggingService.log(this.serviceName, Severity.Information, `Preparing to notify [API Message] subscribers.`);\n        this.apiMessagesSubject.next(<any>response.data);\n      } else if (!response.isSuccess && response instanceof ApiResponse) {\n        this.handleServiceErrors(response);\n      }\n    }\n  }\n\n  /**\n   * Use to handle the response of a notification validation.\n   * @param response an ApiResponse<Notification> where the [Data] payload is of type [Notification]\n   *\n   */\n  private handleAddMessage<T extends Notification>(response: ApiResponse<T>, options?: NotificationOptions) {\n    if (response instanceof ApiResponse) {\n      if (response.isSuccess && response instanceof ApiResponse && response.data) {\n        const message: Notification = response.data;\n        this.loggingService.log(this.serviceName, Severity.Information, `Preparing to notify notification subscribers of new message: ${message.title}`);\n\n        if (message instanceof Notification && options) {\n          message.options = options;\n        }\n        this.notificationsSubject$.next(message);\n      } else if (!response.isSuccess && response instanceof ApiResponse) {\n        this.handleServiceErrors(response);\n      }\n    }\n  }\n\n  private handleServiceErrors(response: any) {\n    if (!response.IsSuccess && response instanceof ServiceResponse && response.Errors) {\n      const message = new Notification();\n      message.messages = [response.Message];\n      message.severity = NotificationSeverity.error;\n      message.notifierType = NotifierType.Toast;\n      message.title = response.Message;\n      message.description = response.Message;\n      this.loggingService.log(this.serviceName, Severity.Information, `Preparing to notify notification subscribers of new message: ${message.title}`);\n\n      this.notificationsSubject$.next(message);\n    }\n    this.loggingService.log(this.serviceName, Severity.Error, `Failed to process notification message. ${response}`);\n  }\n\n  /**\n   * Use to manage the subscription for processing a new notification message.\n   */\n  private finishAddMessageRequest(): void {\n    this.finishRequest(this.serviceName);\n    if (this.addMessageSubscription) {\n      this.addMessageSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Use to finish processing API messages.\n   * @param serviceName\n   */\n  private finishAddApiRequest(): void {\n    this.finishRequest(this.serviceName);\n    if (this.addApiResponseSubscription) {\n      this.addApiResponseSubscription.unsubscribe();\n    }\n  }\n}\n","export class NotificationServiceMock {\n  addApiResponse() {\n    return null;\n  }\n\n  addMessage() {\n    return null;\n  }\n\n  reset() {\n    return null;\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}