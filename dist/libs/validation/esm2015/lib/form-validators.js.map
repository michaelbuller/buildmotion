{"version":3,"file":"form-validators.js","sourceRoot":"","sources":["../../../../../libs/validation/src/lib/form-validators.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,2BAA2B,CAAC;AAE1D,MAAM,UAAU,iBAAiB;IAC/B,MAAM,0BAA0B,GAAG;QACjC,aAAa,CAAC,4BAA4B;QAC1C,aAAa,CAAC,4BAA4B;QAC1C,aAAa,CAAC,sBAAsB;QACpC,aAAa,CAAC,qBAAqB;KACpC,CAAC;IACF,OAAO,CAAC,OAAwB,EAA2B,EAAE;QAC3D,OAAO,0BAA0B,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,4BAA4B,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAClI,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,4BAA4B;IAC1C,OAAO,CAAC,OAAwB,EAA2B,EAAE;QAC3D,OAAO,CAAC,aAAa,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACxG,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,4BAA4B;IAC1C,OAAO,CAAC,OAAwB,EAA2B,EAAE;QAC3D,OAAO,CAAC,aAAa,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACzG,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,8BAA8B;IAC5C,OAAO,CAAC,OAAwB,EAA2B,EAAE;QAC3D,OAAO,CAAC,aAAa,CAAC,4BAA4B,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACjH,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,8BAA8B;IAC5C,OAAO,CAAC,OAAwB,EAA2B,EAAE;QAC3D,OAAO,CAAC,aAAa,CAAC,4BAA4B,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACjH,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,aAAa;IAC3B,OAAO,CAAC,OAAwB,EAA2B,EAAE;QAC3D,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACvF,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\nimport { RuleConstants } from '@buildmotion/rules-engine';\n\nexport function passwordValidator(): ValidatorFn {\n  const passwordRegularExpressions = [\n    RuleConstants.lowercaseAlphaCharacterRegEx,\n    RuleConstants.uppercaseAlphaCharacterRegEx,\n    RuleConstants.numericCharactersRegEx,\n    RuleConstants.specialCharacterRegEx,\n  ];\n  return (control: AbstractControl): ValidationErrors | null => {\n    return passwordRegularExpressions.some((regExp) => !regExp.test(control.value)) ? { passwordCharacterConstraints: true } : null;\n  };\n}\n\nexport function passwordSpecialCharValidator(): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    return !RuleConstants.specialCharacterRegEx.test(control.value) ? { missingSpecialChar: true } : null;\n  };\n}\n\nexport function passwordNumericCharValidator(): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    return !RuleConstants.numericCharactersRegEx.test(control.value) ? { missingNumericChar: true } : null;\n  };\n}\n\nexport function passwordUpperCaseCharValidator(): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    return !RuleConstants.uppercaseAlphaCharacterRegEx.test(control.value) ? { missingUpperCaseChar: true } : null;\n  };\n}\n\nexport function passwordLowerCaseCharValidator(): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    return !RuleConstants.lowercaseAlphaCharacterRegEx.test(control.value) ? { missingLowerCaseChar: true } : null;\n  };\n}\n\nexport function nameValidator(): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    return !RuleConstants.unicodeName.test(control.value) ? { invalidName: true } : null;\n  };\n}\n"]}