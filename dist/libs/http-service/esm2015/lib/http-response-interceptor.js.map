{"version":3,"file":"http-response-interceptor.js","sourceRoot":"","sources":["../../../../../libs/http-service/src/lib/http-response-interceptor.ts"],"names":[],"mappings":"AAAA,uDAAuD;AACvD,OAAO,EAKL,YAAY,EACb,MAAM,sBAAsB,CAAC;AAC9B,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AAEvC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;;AAGrC,MAAM,OAAO,uBAAuB;IADpC;QAEE,kBAAa,GAAG,IAAI,CAAC;QACrB,uBAAkB,GAAG,KAAK,CAAC;KAsC5B;IApCC,SAAS,CACP,OAAyB,EACzB,IAAiB;QAEjB,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,GAAG,CAAC,CAAC,KAAqB,EAAE,EAAE;YAC5B,IAAI,KAAK,YAAY,YAAY,EAAE;gBACjC,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE;oBAClD,OAAO,KAAK,CAAC;iBACd;qBAAM;oBACL,kFAAkF;oBAClF,MAAM,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;oBACtC,WAAW,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;oBAC9B,WAAW,CAAC,OAAO,GAAG,oDAAoD,CAAC;oBAC3E,WAAW,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;oBACnC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACnE,WAAW,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;oBAE1C,mCAAmC;oBACnC,OAAO,KAAK,CAAC,KAAK,CAAC;wBACjB,IAAI,EAAE,WAAW;qBAClB,CAAC,CAAA;iBACH;aACF;YAED,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,uBAAuB,CAAC,MAAc;QACpC,IAAI,MAAM,KAAK,GAAG,EAAE;YAClB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;;qHAvCU,uBAAuB;yHAAvB,uBAAuB;4FAAvB,uBAAuB;kBADnC,UAAU","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ApiResponse } from '@buildmotion/core';\nimport { Guid } from 'guid-typescript';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class HttpResponseInterceptor implements HttpInterceptor {\n  displayToUser = true;\n  doNotDisplayToUser = false;\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      map((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse) {\n          if (event.body && event.body.id && event.body.data) {\n            return event;\n          } else {\n            // FIXME: WRAP API RESPONSE; REMOVE WHEN API RETURNS DATA IN PROPER FORMAT/SCHEMA;\n            const apiResponse = new ApiResponse();\n            apiResponse.data = event.body;\n            apiResponse.message = 'API response wrapped by [HttpResponseInterceptor].';\n            apiResponse.timestamp = new Date();\n            apiResponse.isSuccess = this.determineResponseStatus(event.status);\n            apiResponse.id = Guid.create().toString();\n\n            // return the new response/wrapped;\n            return event.clone({\n              body: apiResponse\n            })\n          }\n        }\n\n        return event;\n      })\n    );\n  }\n\n  determineResponseStatus(status: number): boolean {\n    if (status === 200) {\n      return true;\n    }\n    return false;\n  }\n}\n"]}