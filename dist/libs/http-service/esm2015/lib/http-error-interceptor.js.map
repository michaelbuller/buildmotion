{"version":3,"file":"http-error-interceptor.js","sourceRoot":"","sources":["../../../../../libs/http-service/src/lib/http-error-interceptor.ts"],"names":[],"mappings":"AAAA,uDAAuD;AACvD,OAAO,EAAE,UAAU,EAAE,cAAc,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAQ5E,OAAO,EAAc,UAAU,EAAE,MAAM,MAAM,CAAC;AAC9C,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AACnD,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;;AAG3C,MAAM,OAAO,oBAAoB;IAE/B,YAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAIlC,kBAAa,GAAG,IAAI,CAAC;QACrB,uBAAkB,GAAG,KAAK,CAAC;QAJzB,OAAO;IACT,CAAC;IAKD,SAAS,CACP,OAAyB,EACzB,IAAiB;QAEjB,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,KAAK,CAAC,CAAC,CAAC,EACR,UAAU,CAAC,CAAC,KAAU,EAAE,EAAE;YACxB,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED;;;;;;;OAOG;IACO,WAAW,CAAC,KAAwB;;QAC5C,MAAM,gBAAgB,GAAG,IAAI,WAAW,EAAE,CAAC;QAC3C,gBAAgB,CAAC,SAAS,GAAG,KAAK,CAAC;QACnC,gBAAgB,CAAC,OAAO,GAAG,wBAAwB,CAAC;QACpD,gBAAgB,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;QAExC,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,EAAE;YACxB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;SAC1C;QAED,iGAAiG;QACjG,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;YACrC,kEAAkE;YAClE,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAC5B,IAAI,UAAU,CACZ,YAAY,EACZ,0CAA0C,EAC1C,cAAc,CAAC,KAAK,CACrB,CACF,CAAC;YACF,OAAO,UAAU,CAAC,gBAAgB,CAAC,CAAC;SACrC;aAAM;YACL,mEAAmE;YACnE,IAAI,KAAK,YAAY,WAAW,EAAE;gBAChC;;;;;mBAKG;gBACH,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;aAC1B;iBAAM;gBACL,IAAI,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK,0CAAE,iBAAiB,EAAE;oBACnC,gBAAgB,CAAC,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAA;iBACzD;gBACD,0FAA0F;gBAC1F,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAC5B,IAAI,UAAU,CACZ,YAAY,EACZ,GAAG,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC,UAAU,KAAK,KAAK,CAAC,OAAO,EAAE,EACxD,cAAc,CAAC,KAAK,CACrB,CACF,CAAC;gBACF,OAAO,UAAU,CAAC,gBAAgB,CAAC,CAAC;aACrC;SACF;IACH,CAAC;;kHA3EU,oBAAoB;sHAApB,oBAAoB;4FAApB,oBAAoB;kBADhC,UAAU","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ApiMessage, ApiMessageType, ApiResponse } from '@buildmotion/core';\nimport {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class HttpErrorInterceptor implements HttpInterceptor {\n\n  constructor(private router: Router) {\n    return;\n  }\n\n  displayToUser = true;\n  doNotDisplayToUser = false;\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      retry(1),\n      catchError((error: any) => {\n        return this.handleError(error);\n      })\n    );\n  }\n\n  /**\n   * Use to handle errors during HTTP/Web API operations. The caller expects\n   * an Observable response - this method will either return the response from\n   * the server or a new [ApiResponse] as an Observable for the client to\n   * handle.\n   *\n   * @param error The error from the HTTP response.\n   */\n  protected handleError(error: HttpErrorResponse): Observable<any> {\n    const apiErrorResponse = new ApiResponse();\n    apiErrorResponse.isSuccess = false;\n    apiErrorResponse.message = 'Unexpected HTTP error.';\n    apiErrorResponse.timestamp = new Date();\n\n    if (error.status === 401) {\n      this.router.navigateByUrl('/auth/login');\n    }\n\n    // Use the base error object to determine if the error type is a general or an all-purpose error.\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      apiErrorResponse.messages.push(\n        new ApiMessage(\n          `HTTP_ERROR`,\n          `A client-side or network error occurred.`,\n          ApiMessageType.Error\n        )\n      );\n      return throwError(apiErrorResponse);\n    } else {\n      // The API returned an unsuccessful response (failure status code).\n      if (error instanceof ApiResponse) {\n        /**\n         * A known error response format from the API/Server; rethrow this response.\n         *\n         * Throwing the error sends the Observable to the subscriber of the response.\n         * The subscriber or consumer should handle the response and display of messages.\n         */\n        return throwError(error);\n      } else {\n        if (error?.error?.error_description) {\n          apiErrorResponse.message = error.error.error_description\n        }\n        // An unhandled error/exception - may not want to display this information to an end-user.\n        apiErrorResponse.messages.push(\n          new ApiMessage(\n            `HTTP_ERROR`,\n            `${error.status}: ${error.statusText}. ${error.message}`,\n            ApiMessageType.Error\n          )\n        );\n        return throwError(apiErrorResponse);\n      }\n    }\n  }\n}\n"]}