{"version":3,"file":"http.service.js","sourceRoot":"","sources":["../../../../../libs/http-service/src/lib/http.service.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ApiResponse } from '@buildmotion/core';\nimport { HttpRequestMethod } from './http-request-methods.enum';\nimport { HttpRequestOptions } from './http-request-options';\nimport { LoggingService, Severity } from '@buildmotion/logging';\nimport { ConfigurationService } from '@buildmotion/configuration';\nimport { ServiceBase, ServiceContext } from '@buildmotion/foundation';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpService extends ServiceBase {\n  private csrfToken = '';\n\n  constructor(\n    private httpClient: HttpClient,\n    loggingService: LoggingService,\n    serviceContext: ServiceContext,\n    private configService: ConfigurationService\n  ) {\n    super('HttpService', loggingService, serviceContext);\n    if (configService.settings) this.getCsrfToken().subscribe((resp: ApiResponse<any>) => this.handleCsrfResponse(resp));\n  }\n\n  /**\n   * Use to create [options] for the API request.\n   * @param method Use to indicate the HttpRequest verb to target.\n   * @param headers Use to provide any [HttpHeaders] with the request.\n   * @param url Use to indicate the target URL for the API request.\n   * @param body Use to provide a JSON object with the payload for the request.\n   * @param withCredentials Use to indicate if request will include credentials (cookies), default value is [false].\n   */\n  createOptions(\n    method: HttpRequestMethod,\n    headers: HttpHeaders | null,\n    url: string,\n    body: any,\n    params: any,\n    withCredentials = false\n  ): HttpRequestOptions {\n    const options = new HttpRequestOptions();\n    options.requestMethod = method;\n    options.headers = headers || new HttpHeaders();\n    options.requestUrl = url;\n    options.body = body;\n    options.params = params;\n    options.withCredentials = withCredentials;\n    return options;\n  }\n\n  /**\n   * Use to create a new [HttpHeaders] object for the HTTP/API request.\n   * @param includeCsrf Include CSRF header\n   * @returns\n   */\n  createHeader(includeCsrf = false): HttpHeaders {\n    let headers = new HttpHeaders();\n    headers = headers.set('content-type', 'application/json');\n\n    if (includeCsrf) {\n      headers = headers.set('x-csrf-token', this.csrfToken);\n    }\n\n    return headers;\n  }\n\n  /**\n   * Use to execute an HTTP request using the specified options in the [HttpRequestOptions].\n   * @param requestOptions\n   */\n  // execute<T>(requestOptions: HttpRequestOptions): Observable<HttpResponse<T>> {\n  execute<T>(requestOptions: HttpRequestOptions): any {\n    return this.httpClient.request<T>(requestOptions.requestMethod.toString(), requestOptions.requestUrl, {\n      body: requestOptions.body,\n      headers: requestOptions.headers,\n      reportProgress: requestOptions.reportProgress,\n      observe: 'response',\n      params: requestOptions.params,\n      responseType: requestOptions.responseType,\n      withCredentials: requestOptions.withCredentials,\n    });\n  }\n\n  executeObserveBody<T>(requestOptions: HttpRequestOptions): Observable<T> {\n    return this.httpClient.request<T>(requestOptions.requestMethod.toString(), requestOptions.requestUrl, {\n      body: requestOptions.body,\n      headers: requestOptions.headers,\n      reportProgress: requestOptions.reportProgress,\n      observe: 'body',\n      params: requestOptions.params,\n      responseType: requestOptions.responseType,\n      withCredentials: requestOptions.withCredentials,\n    });\n  }\n\n\n\n  /**\n   * Get CSRF token\n   * @returns Observable\n   */\n  getCsrfToken() {\n    const requestUrl = this.configService.settings.apiConfig.csrf;\n    this.loggingService.log(this.serviceName, Severity.Information, `Preparing to get CSRF token.`);\n    const options = this.createOptions(HttpRequestMethod.get, null, requestUrl, null, null, false);\n    return this.execute(options);\n  }\n\n  /**\n   * Handle Request to get CSRF Token\n   * @param response\n   */\n  private handleCsrfResponse(response: any): void {\n    const requestName = `CSRF token request`;\n    if (response) {\n      const { body } = response;\n      this.csrfToken = body?.data?.token;\n      this.loggingService.log(\n        this.serviceName,\n        Severity.Information,\n        `Preparing to handle successful response for ${requestName}.`\n      );\n    } else {\n      this.loggingService.log(\n        this.serviceName,\n        Severity.Warning,\n        `Received unexpected null/undefined response for ${requestName}.`\n      );\n    }\n  }\n}\n"]}