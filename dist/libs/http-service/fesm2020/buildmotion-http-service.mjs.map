{"version":3,"file":"buildmotion-http-service.mjs","sources":["../../../../libs/http-service/src/lib/http-service.module.ts","../../../../libs/http-service/src/lib/http-request-methods.enum.ts","../../../../libs/http-service/src/lib/http-request-options.ts","../../../../libs/http-service/src/lib/http.service.ts","../../../../libs/http-service/src/lib/http-error-interceptor.ts","../../../../libs/http-service/src/lib/http-response-interceptor.ts","../../../../libs/http-service/src/lib/http-token-interceptor.ts","../../../../libs/http-service/src/buildmotion-http-service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n})\nexport class HttpServiceModule {}\n","/**\n * Use to indicate the request method to use.\n */\nexport enum HttpRequestMethod {\n  get = 'GET',\n  post = 'POST',\n  put = 'PUT',\n  delete = 'DELETE',\n  options = 'OPTIONS',\n  head = 'HEAD',\n  patch = 'PATCH',\n}\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { HttpRequestMethod } from './http-request-methods.enum';\n\n/**\n * Use to configure the HTTP options for a request.\n */\nexport class HttpRequestOptions {\n  requestMethod = HttpRequestMethod.get;\n  body?: any;\n  headers?: HttpHeaders | { [header: string]: string | string[] };\n  observe?: 'response';\n  params?: HttpParams | { [params: string]: string | string[] };\n  reportProgress?: boolean;\n  withCredentials?: boolean;\n  requestUrl = '';\n  responseType?: 'json';\n\n  toString(): string {\n    return `Method: ${this.requestMethod}`;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ApiResponse } from '@buildmotion/core';\nimport { HttpRequestMethod } from './http-request-methods.enum';\nimport { HttpRequestOptions } from './http-request-options';\nimport { LoggingService, Severity } from '@buildmotion/logging';\nimport { ConfigurationService } from '@buildmotion/configuration';\nimport { ServiceBase, ServiceContext } from '@buildmotion/foundation';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpService extends ServiceBase {\n  private csrfToken = '';\n\n  constructor(\n    private httpClient: HttpClient,\n    loggingService: LoggingService,\n    serviceContext: ServiceContext,\n    private configService: ConfigurationService\n  ) {\n    super('HttpService', loggingService, serviceContext);\n    if (configService.settings) this.getCsrfToken().subscribe((resp: ApiResponse<any>) => this.handleCsrfResponse(resp));\n  }\n\n  /**\n   * Use to create [options] for the API request.\n   * @param method Use to indicate the HttpRequest verb to target.\n   * @param headers Use to provide any [HttpHeaders] with the request.\n   * @param url Use to indicate the target URL for the API request.\n   * @param body Use to provide a JSON object with the payload for the request.\n   * @param withCredentials Use to indicate if request will include credentials (cookies), default value is [false].\n   */\n  createOptions(\n    method: HttpRequestMethod,\n    headers: HttpHeaders | null,\n    url: string,\n    body: any,\n    params: any,\n    withCredentials = false\n  ): HttpRequestOptions {\n    const options = new HttpRequestOptions();\n    options.requestMethod = method;\n    options.headers = headers || new HttpHeaders();\n    options.requestUrl = url;\n    options.body = body;\n    options.params = params;\n    options.withCredentials = withCredentials;\n    return options;\n  }\n\n  /**\n   * Use to create a new [HttpHeaders] object for the HTTP/API request.\n   * @param includeCsrf Include CSRF header\n   * @returns\n   */\n  createHeader(includeCsrf = false): HttpHeaders {\n    let headers = new HttpHeaders();\n    headers = headers.set('content-type', 'application/json');\n\n    if (includeCsrf) {\n      headers = headers.set('x-csrf-token', this.csrfToken);\n    }\n\n    return headers;\n  }\n\n  /**\n   * Use to execute an HTTP request using the specified options in the [HttpRequestOptions].\n   * @param requestOptions\n   */\n  // execute<T>(requestOptions: HttpRequestOptions): Observable<HttpResponse<T>> {\n  execute<T>(requestOptions: HttpRequestOptions): any {\n    return this.httpClient.request<T>(requestOptions.requestMethod.toString(), requestOptions.requestUrl, {\n      body: requestOptions.body,\n      headers: requestOptions.headers,\n      reportProgress: requestOptions.reportProgress,\n      observe: 'response',\n      params: requestOptions.params,\n      responseType: requestOptions.responseType,\n      withCredentials: requestOptions.withCredentials,\n    });\n  }\n\n  executeObserveBody<T>(requestOptions: HttpRequestOptions): Observable<T> {\n    return this.httpClient.request<T>(requestOptions.requestMethod.toString(), requestOptions.requestUrl, {\n      body: requestOptions.body,\n      headers: requestOptions.headers,\n      reportProgress: requestOptions.reportProgress,\n      observe: 'body',\n      params: requestOptions.params,\n      responseType: requestOptions.responseType,\n      withCredentials: requestOptions.withCredentials,\n    });\n  }\n\n\n\n  /**\n   * Get CSRF token\n   * @returns Observable\n   */\n  getCsrfToken() {\n    const requestUrl = this.configService.settings.apiConfig.csrf;\n    this.loggingService.log(this.serviceName, Severity.Information, `Preparing to get CSRF token.`);\n    const options = this.createOptions(HttpRequestMethod.get, null, requestUrl, null, null, false);\n    return this.execute(options);\n  }\n\n  /**\n   * Handle Request to get CSRF Token\n   * @param response\n   */\n  private handleCsrfResponse(response: any): void {\n    const requestName = `CSRF token request`;\n    if (response) {\n      const { body } = response;\n      this.csrfToken = body?.data?.token;\n      this.loggingService.log(\n        this.serviceName,\n        Severity.Information,\n        `Preparing to handle successful response for ${requestName}.`\n      );\n    } else {\n      this.loggingService.log(\n        this.serviceName,\n        Severity.Warning,\n        `Received unexpected null/undefined response for ${requestName}.`\n      );\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ApiMessage, ApiMessageType, ApiResponse } from '@buildmotion/core';\nimport {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class HttpErrorInterceptor implements HttpInterceptor {\n\n  constructor(private router: Router) {\n    return;\n  }\n\n  displayToUser = true;\n  doNotDisplayToUser = false;\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      retry(1),\n      catchError((error: any) => {\n        return this.handleError(error);\n      })\n    );\n  }\n\n  /**\n   * Use to handle errors during HTTP/Web API operations. The caller expects\n   * an Observable response - this method will either return the response from\n   * the server or a new [ApiResponse] as an Observable for the client to\n   * handle.\n   *\n   * @param error The error from the HTTP response.\n   */\n  protected handleError(error: HttpErrorResponse): Observable<any> {\n    const apiErrorResponse = new ApiResponse();\n    apiErrorResponse.isSuccess = false;\n    apiErrorResponse.message = 'Unexpected HTTP error.';\n    apiErrorResponse.timestamp = new Date();\n\n    if (error.status === 401) {\n      this.router.navigateByUrl('/auth/login');\n    }\n\n    // Use the base error object to determine if the error type is a general or an all-purpose error.\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      apiErrorResponse.messages.push(\n        new ApiMessage(\n          `HTTP_ERROR`,\n          `A client-side or network error occurred.`,\n          ApiMessageType.Error\n        )\n      );\n      return throwError(apiErrorResponse);\n    } else {\n      // The API returned an unsuccessful response (failure status code).\n      if (error instanceof ApiResponse) {\n        /**\n         * A known error response format from the API/Server; rethrow this response.\n         *\n         * Throwing the error sends the Observable to the subscriber of the response.\n         * The subscriber or consumer should handle the response and display of messages.\n         */\n        return throwError(error);\n      } else {\n        if (error?.error?.error_description) {\n          apiErrorResponse.message = error.error.error_description\n        }\n        // An unhandled error/exception - may not want to display this information to an end-user.\n        apiErrorResponse.messages.push(\n          new ApiMessage(\n            `HTTP_ERROR`,\n            `${error.status}: ${error.statusText}. ${error.message}`,\n            ApiMessageType.Error\n          )\n        );\n        return throwError(apiErrorResponse);\n      }\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ApiResponse } from '@buildmotion/core';\nimport { Guid } from 'guid-typescript';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class HttpResponseInterceptor implements HttpInterceptor {\n  displayToUser = true;\n  doNotDisplayToUser = false;\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      map((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse) {\n          if (event.body && event.body.id && event.body.data) {\n            return event;\n          } else {\n            // FIXME: WRAP API RESPONSE; REMOVE WHEN API RETURNS DATA IN PROPER FORMAT/SCHEMA;\n            const apiResponse = new ApiResponse();\n            apiResponse.data = event.body;\n            apiResponse.message = 'API response wrapped by [HttpResponseInterceptor].';\n            apiResponse.timestamp = new Date();\n            apiResponse.isSuccess = this.determineResponseStatus(event.status);\n            apiResponse.id = Guid.create().toString();\n\n            // return the new response/wrapped;\n            return event.clone({\n              body: apiResponse\n            })\n          }\n        }\n\n        return event;\n      })\n    );\n  }\n\n  determineResponseStatus(status: number): boolean {\n    if (status === 200) {\n      return true;\n    }\n    return false;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ConfigurationService } from '@buildmotion/configuration';\n@Injectable()\nexport class HttpTokenInterceptor implements HttpInterceptor {\n\n  constructor(\n    private configService: ConfigurationService\n  ) {\n\n  }\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = localStorage.getItem('r360-portal-token');\n    const sysAccId = localStorage.getItem('r360-portal-sysAccId');\n    if (\n      request.url.includes(this.configService.config.apiConfig.apiURL) &&\n      !request.url.endsWith('auth/token') &&\n      token &&\n      sysAccId\n    ) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`,\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1"],"mappings":";;;;;;;;;;;;;;;;MAMa,iBAAiB,CAAA;;8GAAjB,iBAAiB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAjB,iBAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,iBAAiB,YAFlB,YAAY,CAAA,EAAA,CAAA,CAAA;AAEX,iBAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,iBAAiB,YAFlB,YAAY,CAAA,EAAA,CAAA,CAAA;2FAEX,iBAAiB,EAAA,UAAA,EAAA,CAAA;kBAH7B,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;oBACR,OAAO,EAAE,CAAC,YAAY,CAAC;AACxB,iBAAA,CAAA;;;ACLD;;AAEG;IACS,kBAQX;AARD,CAAA,UAAY,iBAAiB,EAAA;AAC3B,IAAA,iBAAA,CAAA,KAAA,CAAA,GAAA,KAAW,CAAA;AACX,IAAA,iBAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACb,IAAA,iBAAA,CAAA,KAAA,CAAA,GAAA,KAAW,CAAA;AACX,IAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnB,IAAA,iBAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACb,IAAA,iBAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACjB,CAAC,EARW,iBAAiB,KAAjB,iBAAiB,GAQ5B,EAAA,CAAA,CAAA;;ACRD;;AAEG;MACU,kBAAkB,CAAA;AAA/B,IAAA,WAAA,GAAA;AACE,QAAA,IAAA,CAAA,aAAa,GAAG,iBAAiB,CAAC,GAAG,CAAC;QAOtC,IAAU,CAAA,UAAA,GAAG,EAAE,CAAC;KAMjB;IAHC,QAAQ,GAAA;AACN,QAAA,OAAO,CAAW,QAAA,EAAA,IAAI,CAAC,aAAa,EAAE,CAAC;KACxC;AACF;;ACpBD;AAYM,MAAO,WAAY,SAAQ,WAAW,CAAA;AAG1C,IAAA,WAAA,CACU,UAAsB,EAC9B,cAA8B,EAC9B,cAA8B,EACtB,aAAmC,EAAA;AAE3C,QAAA,KAAK,CAAC,aAAa,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;QAL7C,IAAU,CAAA,UAAA,GAAV,UAAU,CAAY;QAGtB,IAAa,CAAA,aAAA,GAAb,aAAa,CAAsB;QANrC,IAAS,CAAA,SAAA,GAAG,EAAE,CAAC;QASrB,IAAI,aAAa,CAAC,QAAQ;AAAE,YAAA,IAAI,CAAC,YAAY,EAAE,CAAC,SAAS,CAAC,CAAC,IAAsB,KAAK,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;KACtH;AAED;;;;;;;AAOG;AACH,IAAA,aAAa,CACX,MAAyB,EACzB,OAA2B,EAC3B,GAAW,EACX,IAAS,EACT,MAAW,EACX,eAAe,GAAG,KAAK,EAAA;AAEvB,QAAA,MAAM,OAAO,GAAG,IAAI,kBAAkB,EAAE,CAAC;AACzC,QAAA,OAAO,CAAC,aAAa,GAAG,MAAM,CAAC;QAC/B,OAAO,CAAC,OAAO,GAAG,OAAO,IAAI,IAAI,WAAW,EAAE,CAAC;AAC/C,QAAA,OAAO,CAAC,UAAU,GAAG,GAAG,CAAC;AACzB,QAAA,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AACpB,QAAA,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AACxB,QAAA,OAAO,CAAC,eAAe,GAAG,eAAe,CAAC;AAC1C,QAAA,OAAO,OAAO,CAAC;KAChB;AAED;;;;AAIG;IACH,YAAY,CAAC,WAAW,GAAG,KAAK,EAAA;AAC9B,QAAA,IAAI,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;QAChC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;AAE1D,QAAA,IAAI,WAAW,EAAE;YACf,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;AACvD,SAAA;AAED,QAAA,OAAO,OAAO,CAAC;KAChB;AAED;;;AAGG;;AAEH,IAAA,OAAO,CAAI,cAAkC,EAAA;AAC3C,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAI,cAAc,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,cAAc,CAAC,UAAU,EAAE;YACpG,IAAI,EAAE,cAAc,CAAC,IAAI;YACzB,OAAO,EAAE,cAAc,CAAC,OAAO;YAC/B,cAAc,EAAE,cAAc,CAAC,cAAc;AAC7C,YAAA,OAAO,EAAE,UAAU;YACnB,MAAM,EAAE,cAAc,CAAC,MAAM;YAC7B,YAAY,EAAE,cAAc,CAAC,YAAY;YACzC,eAAe,EAAE,cAAc,CAAC,eAAe;AAChD,SAAA,CAAC,CAAC;KACJ;AAED,IAAA,kBAAkB,CAAI,cAAkC,EAAA;AACtD,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAI,cAAc,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,cAAc,CAAC,UAAU,EAAE;YACpG,IAAI,EAAE,cAAc,CAAC,IAAI;YACzB,OAAO,EAAE,cAAc,CAAC,OAAO;YAC/B,cAAc,EAAE,cAAc,CAAC,cAAc;AAC7C,YAAA,OAAO,EAAE,MAAM;YACf,MAAM,EAAE,cAAc,CAAC,MAAM;YAC7B,YAAY,EAAE,cAAc,CAAC,YAAY;YACzC,eAAe,EAAE,cAAc,CAAC,eAAe;AAChD,SAAA,CAAC,CAAC;KACJ;AAID;;;AAGG;IACH,YAAY,GAAA;QACV,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC;AAC9D,QAAA,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAE,CAAA,4BAAA,CAA8B,CAAC,CAAC;QAChG,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;AAC/F,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;KAC9B;AAED;;;AAGG;AACK,IAAA,kBAAkB,CAAC,QAAa,EAAA;QACtC,MAAM,WAAW,GAAG,CAAA,kBAAA,CAAoB,CAAC;AACzC,QAAA,IAAI,QAAQ,EAAE;AACZ,YAAA,MAAM,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;AACnC,YAAA,IAAI,CAAC,cAAc,CAAC,GAAG,CACrB,IAAI,CAAC,WAAW,EAChB,QAAQ,CAAC,WAAW,EACpB,+CAA+C,WAAW,CAAA,CAAA,CAAG,CAC9D,CAAC;AACH,SAAA;AAAM,aAAA;AACL,YAAA,IAAI,CAAC,cAAc,CAAC,GAAG,CACrB,IAAI,CAAC,WAAW,EAChB,QAAQ,CAAC,OAAO,EAChB,mDAAmD,WAAW,CAAA,CAAA,CAAG,CAClE,CAAC;AACH,SAAA;KACF;;wGAtHU,WAAW,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,UAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,cAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,cAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAX,WAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAW,cADE,MAAM,EAAA,CAAA,CAAA;2FACnB,WAAW,EAAA,UAAA,EAAA,CAAA;kBADvB,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAA;;;ACXlC;MAea,oBAAoB,CAAA;AAE/B,IAAA,WAAA,CAAoB,MAAc,EAAA;QAAd,IAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;QAIlC,IAAa,CAAA,aAAA,GAAG,IAAI,CAAC;QACrB,IAAkB,CAAA,kBAAA,GAAG,KAAK,CAAC;QAJzB,OAAO;KACR;IAKD,SAAS,CACP,OAAyB,EACzB,IAAiB,EAAA;AAEjB,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,KAAK,CAAC,CAAC,CAAC,EACR,UAAU,CAAC,CAAC,KAAU,KAAI;AACxB,YAAA,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SAChC,CAAC,CACH,CAAC;KACH;AAED;;;;;;;AAOG;AACO,IAAA,WAAW,CAAC,KAAwB,EAAA;AAC5C,QAAA,MAAM,gBAAgB,GAAG,IAAI,WAAW,EAAE,CAAC;AAC3C,QAAA,gBAAgB,CAAC,SAAS,GAAG,KAAK,CAAC;AACnC,QAAA,gBAAgB,CAAC,OAAO,GAAG,wBAAwB,CAAC;AACpD,QAAA,gBAAgB,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;AAExC,QAAA,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,EAAE;AACxB,YAAA,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;AAC1C,SAAA;;AAGD,QAAA,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;;AAErC,YAAA,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAC5B,IAAI,UAAU,CACZ,CAAY,UAAA,CAAA,EACZ,0CAA0C,EAC1C,cAAc,CAAC,KAAK,CACrB,CACF,CAAC;AACF,YAAA,OAAO,UAAU,CAAC,gBAAgB,CAAC,CAAC;AACrC,SAAA;AAAM,aAAA;;YAEL,IAAI,KAAK,YAAY,WAAW,EAAE;AAChC;;;;;AAKG;AACH,gBAAA,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;AAC1B,aAAA;AAAM,iBAAA;AACL,gBAAA,IAAI,KAAK,EAAE,KAAK,EAAE,iBAAiB,EAAE;oBACnC,gBAAgB,CAAC,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAA;AACzD,iBAAA;;AAED,gBAAA,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAC5B,IAAI,UAAU,CACZ,CAAY,UAAA,CAAA,EACZ,CAAG,EAAA,KAAK,CAAC,MAAM,CAAK,EAAA,EAAA,KAAK,CAAC,UAAU,CAAK,EAAA,EAAA,KAAK,CAAC,OAAO,CAAE,CAAA,EACxD,cAAc,CAAC,KAAK,CACrB,CACF,CAAC;AACF,gBAAA,OAAO,UAAU,CAAC,gBAAgB,CAAC,CAAC;AACrC,aAAA;AACF,SAAA;KACF;;iHA3EU,oBAAoB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAA,IAAA,CAAA,MAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;qHAApB,oBAAoB,EAAA,CAAA,CAAA;2FAApB,oBAAoB,EAAA,UAAA,EAAA,CAAA;kBADhC,UAAU;;;ACdX;MAea,uBAAuB,CAAA;AADpC,IAAA,WAAA,GAAA;QAEE,IAAa,CAAA,aAAA,GAAG,IAAI,CAAC;QACrB,IAAkB,CAAA,kBAAA,GAAG,KAAK,CAAC;AAsC5B,KAAA;IApCC,SAAS,CACP,OAAyB,EACzB,IAAiB,EAAA;AAEjB,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,GAAG,CAAC,CAAC,KAAqB,KAAI;YAC5B,IAAI,KAAK,YAAY,YAAY,EAAE;AACjC,gBAAA,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE;AAClD,oBAAA,OAAO,KAAK,CAAC;AACd,iBAAA;AAAM,qBAAA;;AAEL,oBAAA,MAAM,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;AACtC,oBAAA,WAAW,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;AAC9B,oBAAA,WAAW,CAAC,OAAO,GAAG,oDAAoD,CAAC;AAC3E,oBAAA,WAAW,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;oBACnC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACnE,WAAW,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;;oBAG1C,OAAO,KAAK,CAAC,KAAK,CAAC;AACjB,wBAAA,IAAI,EAAE,WAAW;AAClB,qBAAA,CAAC,CAAA;AACH,iBAAA;AACF,aAAA;AAED,YAAA,OAAO,KAAK,CAAC;SACd,CAAC,CACH,CAAC;KACH;AAED,IAAA,uBAAuB,CAAC,MAAc,EAAA;QACpC,IAAI,MAAM,KAAK,GAAG,EAAE;AAClB,YAAA,OAAO,IAAI,CAAC;AACb,SAAA;AACD,QAAA,OAAO,KAAK,CAAC;KACd;;oHAvCU,uBAAuB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;wHAAvB,uBAAuB,EAAA,CAAA,CAAA;2FAAvB,uBAAuB,EAAA,UAAA,EAAA,CAAA;kBADnC,UAAU;;;ACdX;MAMa,oBAAoB,CAAA;AAE/B,IAAA,WAAA,CACU,aAAmC,EAAA;QAAnC,IAAa,CAAA,aAAA,GAAb,aAAa,CAAsB;KAG5C;IACD,SAAS,CAAC,OAAyB,EAAE,IAAiB,EAAA;QACpD,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAC9D,QAAA,IACE,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;AAChE,YAAA,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC;YACnC,KAAK;AACL,YAAA,QAAQ,EACR;AACA,YAAA,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;AACtB,gBAAA,UAAU,EAAE;oBACV,aAAa,EAAE,CAAU,OAAA,EAAA,KAAK,CAAE,CAAA;AACjC,iBAAA;AACF,aAAA,CAAC,CAAC;AACJ,SAAA;AACD,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;KAC7B;;iHAvBU,oBAAoB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAA,EAAA,CAAA,oBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;qHAApB,oBAAoB,EAAA,CAAA,CAAA;2FAApB,oBAAoB,EAAA,UAAA,EAAA,CAAA;kBADhC,UAAU;;;ACLX;;AAEG;;;;"}