{"version":3,"file":"buildmotion-foundation.mjs","sources":["../../../../libs/foundation/src/lib/foundation.module.ts","../../../../libs/foundation/src/lib/models/service-response.model.ts","../../../../libs/foundation/src/lib/models/error-response.model.ts","../../../../libs/foundation/src/lib/models/MessageType.ts","../../../../libs/foundation/src/lib/models/ServiceContext.ts","../../../../libs/foundation/src/lib/models/ServiceMessage.ts","../../../../libs/foundation/src/lib/action-base.action.ts","../../../../libs/foundation/src/lib/models/alert-types.constants.ts","../../../../libs/foundation/src/lib/models/alert-notification.model.ts","../../../../libs/foundation/src/lib/business-provider-base.service.ts","../../../../libs/foundation/src/lib/component-base.component.ts","../../../../libs/foundation/src/lib/service-base.ts","../../../../libs/foundation/src/lib/models/service-error.model.ts","../../../../libs/foundation/src/lib/singleton-service-base.ts","../../../../libs/foundation/src/buildmotion-foundation.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n})\nexport class FoundationModule {}\n","import { ServiceError } from './service-error.model';\n\nexport class ServiceResponse {\n  IsSuccess!: boolean;\n  Message!: string;\n  Data: any;\n  Errors: Array<ServiceError> = new Array<ServiceError>();\n}\n","import { ServiceResponse } from './service-response.model';\n\nexport class ErrorResponse extends ServiceResponse {\n  Exception!: Error;\n\n  constructor() {\n    super();\n    this.IsSuccess = false;\n  }\n}\n","/**\n * Use to indicate the type for the [ServiceMessage].\n */\nexport enum MessageType {\n  /**\n   * Use to indicate the message type is informational.\n   */\n  Information = 1,\n\n  /**\n   * Use to indicate the message type is warning.\n   */\n  Warning = 2,\n\n  /**\n   * Use to indicate the message type is error.\n   */\n  Error = 3,\n}\n","import { ServiceMessage } from './ServiceMessage';\nimport { MessageType } from './MessageType';\nimport { Injectable } from '@angular/core';\n\n/**\n * Use this class to manage the context of a single service call. This\n * class will contain a list of any service messages added during the processing\n * of a service request.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServiceContext {\n  /**\n   * A list of service messages added by the application during the processing of the\n   * specified service request.\n   */\n  Messages: Array<ServiceMessage> = new Array<ServiceMessage>();\n\n  /**\n   * Use this method to add a new message to the [ServiceContext].\n   */\n  addMessage(message: ServiceMessage) {\n    this.Messages.push(message);\n  }\n\n  /**\n   * Use to determine if the current [ServiceContext] contains any messages with type of [Error].\n   */\n  hasErrors(): boolean {\n    if (this.Messages && this.Messages.length > 0) {\n      const errorMessages = this.Messages.filter((f) => f.MessageType === MessageType.Error);\n      if (errorMessages.length > 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Use to determine if the current [ServiceContext] does not contain any errors.\n   */\n  isGood(): boolean {\n    if (this.Messages && this.Messages.length > 0) {\n      const errorMessages = this.Messages.filter((f) => f.MessageType === MessageType.Error);\n      if (errorMessages.length > 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { MessageType } from './MessageType';\n\n/**\n * Use this class to create a message for the current [ServiceContext].\n */\nexport class ServiceMessage {\n  /** Use to specify the name of the message. */\n  Name: string;\n\n  /** Use to specify the message. */\n  Message: string;\n\n  /** Use to specify  */\n  MessageType: MessageType = MessageType.Information;\n\n  /** Use to indicate the source of the message. */\n  Source = '';\n\n  /** Use to indicate if the specified message should be displayed to the user. */\n  DisplayToUser = false;\n\n  /**\n   * The constructor for the [ServiceMessage].\n   * @param name The name of the message.\n   * @param message The display text of the message.\n   * @param messageType: Indicates the type of message.\n   * @param source: Indicates the source of the message.\n   * @param displayToUser: Indicates if the message is displayable.\n   */\n\n  constructor(name: string, message?: string, messageType?: MessageType, source?: string);\n  /**\n   * The constructor for the [ServiceMessage].\n   * @param name The name of the message.\n   * @param message The display text of the message.\n   * @param messageType: Indicates the type of message.\n   * @param source: Indicates the source of the message.\n   */\n  constructor(name: string, message: string, messageType?: MessageType, source?: string);\n  /**\n   *\n   * @param name The name of the message.\n   * @param message The display text of the message.\n   * @param messageType: Indicates the type of message.\n   * @param source: Indicates the source of the message.\n   * @param displayToUser Use to indicate if the specified message should be displayed to the user.\n   */\n  constructor(name: string, message: string, messageType?: MessageType, source?: string, displayToUser = false) {\n    this.Name = name;\n    this.Message = message;\n    if (message) {\n      this.MessageType = messageType as MessageType;\n    }\n    if (source) {\n      this.Source = source as string;\n    }\n    this.DisplayToUser = displayToUser;\n  }\n\n  /**\n   * Use this extension method to add the name of the message.\n   * @param name The name of the service message.\n   */\n  WithName(name: string) {\n    this.Name = name;\n    return this;\n  }\n\n  /**\n   * Use this extension method to add the message text to the ServiceMessage item.\n   * @param message The display text of the service message.\n   */\n  WithMessage(message: string) {\n    this.Message = message;\n    return this;\n  }\n\n  /**\n   * Use this extension method to set the [MessageType] of the ServiceMessage item.\n   * @param messageType: Use to indicate the message type.\n   */\n  WithMessageType(messageType: MessageType) {\n    this.MessageType = messageType;\n    return this;\n  }\n\n  /**\n   * Use this extension method to set the [Source] of the ServiceMessage item.\n   * @param source: Use to indicate the source of the message.\n   */\n  WithSource(source: string) {\n    this.Source = source;\n    return this;\n  }\n\n  /**\n   * Use this extension method to set the [DisplayToUser] indicator of the ServiceMessage.\n   * @param displayToUser: A boolean value to indicate if the message can be displayed to the user.\n   */\n  WithDisplayToUser(displayToUser: boolean) {\n    this.DisplayToUser = displayToUser;\n    return this;\n  }\n\n  /**\n   * Use this method return a string representing the ServiceMessage.\n   */\n  toString() {\n    return `Name: ${this.Name}; Message: ${this.Message}; MessageType: ${this.MessageType.toString()}; Source: ${this.Source}; DisplayToUser: ${this.DisplayToUser}`;\n  }\n}\n","import { Action, ActionResult } from '@buildmotion/actions';\nimport { ApiMessage, ApiMessageType, ApiResponse } from '@buildmotion/core';\nimport { Severity, ILoggingService } from '@buildmotion/logging';\nimport { CompositeRule, RuleResult, ValidationContext } from '@buildmotion/rules-engine';\nimport { Observable, of, throwError } from 'rxjs';\nimport { ErrorResponse } from './models/error-response.model';\nimport { MessageType } from './models/MessageType';\nimport { ServiceContext } from './models/ServiceContext';\nimport { ServiceMessage } from './models/ServiceMessage';\n\n/**\n * This is the application's base Action class that provides implementation of pipeline methods - pre/post\n * execution methods.\n *\n * The pre-execute methods that can be implemented are:\n *\t\t1. start();\n *\t\t2. audit();\n *\t\t3. preValidateAction();\n *\t\t4. evaluateRules();\n *\t\t5. postValidateAction();\n *\t\t6. preExecuteAction();\n *\n *If the status of action is good, the business logic will be executed using the:\n *\t\t1. processAction();\n *\n * The post-execution methods that can be implemented are:\n *\t\t1. postExecuteAction();\n *\t\t2. validateActionResult();\n *\t\t3. finish();\n */\nexport class ActionBase<T> extends Action {\n  serviceContext: ServiceContext = new ServiceContext();\n  response: Observable<T> | any = this.createUnknownResponse();\n  loggingService!: ILoggingService;\n  override actionName!: string;\n\n  constructor(actionName?: string) {\n    super();\n    this.actionName = actionName ?? '';\n  }\n\n  start() {\n    // this.loggingService?.log(\n    //   this.actionName,\n    //   Severity.Information,\n    //   `Preparing to [start] action.`\n    // );\n  }\n\n  audit() {\n    this.loggingService?.log(this.actionName, Severity.Information, `Preparing to [audit] action.`);\n  }\n\n  createUnknownResponse(): Observable<any> | any {\n    const response = new ApiResponse();\n    return of(response);\n  }\n\n  preExecuteAction() {\n    this.loggingService?.log(this.actionName, Severity.Information, `Preparing to [preExecuteAction] action.`);\n  }\n\n  performAction() {\n    this.loggingService?.log(this.actionName, Severity.Information, `Preparing to perform [${this.actionName}].`);\n  }\n\n  preValidateAction() {\n    this.loggingService?.log(this.actionName, Severity.Information, `Preparing to preValidateAction [${this.actionName}].`);\n  }\n\n  finish() {\n    this.loggingService?.log(this.actionName, Severity.Information, `Preparing to [finish] action.`);\n  }\n\n  /**\n   * This is a required implementation if you want to render/execute the rules that\n   * are associated to the specified action.\n   */\n  override validateAction(): ValidationContext {\n    return this.validationContext.renderRules();\n  }\n\n  postValidateAction() {\n    this.loggingService?.log(this.actionName, Severity.Information, `Preparing to determine if the action contains validation errors in ${this.actionName}`);\n\n    if (this.validationContext.hasRuleViolations()) {\n      this.loggingService?.log(this.actionName, Severity.Information, `The target contains validation errors in ${this.actionName}`);\n\n      // Load the error/rule violations into the ServiceContext so that the information bubbles up to the caller of the service;\n      this.validationContext.results.forEach((result) => {\n        if (!result.isValid) {\n          this.publishRuleResult(result);\n          this.retrieveRuleDetails(result);\n        }\n      });\n\n      this.response = this.createFailResponse();\n    }\n  }\n\n  createFailResponse(): Observable<ApiResponse<T>> {\n    const apiResponse = new ApiResponse<T>();\n    apiResponse.isSuccess = false;\n    apiResponse.message = `Request failed.`;\n\n    const messages = new Array<ApiMessage>();\n    if (this.serviceContext.hasErrors() && this.serviceContext.Messages.length > 0) {\n      this.serviceContext.Messages.map((m) => {\n        const error = new ApiMessage();\n        error.message = m.Message;\n        error.messageType = ApiMessageType.Error;\n        error.code = m.Name;\n\n        messages.push(error);\n      });\n    }\n    apiResponse.messages = messages.length > 0 ? messages : [];\n    return of(apiResponse);\n  }\n\n  postExecuteAction() {\n    if (this.actionResult === ActionResult.Fail) {\n      this.serviceContext.Messages.forEach((e) => {\n        if (e.MessageType === MessageType.Error) {\n          this.loggingService?.log(this.actionName, Severity.Error, e.toString());\n        }\n      });\n    }\n  }\n\n  /**\n   * All concrete actions must override and implement this method. It is defined in the [Action] framework class.\n   */\n  validateActionResult(): ActionResult {\n    this.loggingService?.log(this.actionName, Severity.Information, `Running [validateActionResult] for ${this.actionName}.`);\n    // determine the status of the action based on any rule violations;\n    if (this.validationContext.hasRuleViolations()) {\n      this.loggingService?.log(this.actionName, Severity.Error, `The ${this.actionName} contains rule violations.`);\n      this.actionResult = ActionResult.Fail;\n\n      const errorResponse = new ErrorResponse();\n      errorResponse.IsSuccess = false;\n      errorResponse.Message = `Validation errors exist.`;\n      this.response = throwError(errorResponse);\n    }\n    this.actionResult = this.serviceContext.isGood() ? ActionResult.Success : ActionResult.Fail;\n    return this.actionResult;\n  }\n\n  /**\n   * Use to process rule results for composite rules. Note, that this function is recursive\n   * and will process all composite rules in the rule set contained in the ValidationContext.\n   * @param ruleResult The result of a rendered rule.\n   */\n  retrieveRuleDetails(ruleResult: RuleResult) {\n    if (ruleResult.rulePolicy instanceof CompositeRule) {\n      const composite = ruleResult.rulePolicy as CompositeRule;\n      if (composite && composite.hasErrors) {\n        const errors = composite.results.filter((result) => !result.isValid && result.rulePolicy && result.rulePolicy.isDisplayable);\n\n        errors.forEach((errorResult) => {\n          this.publishRuleResult(errorResult);\n\n          if (errorResult.rulePolicy instanceof CompositeRule) {\n            this.retrieveRuleDetails(errorResult);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * A helper function to publish a new [ServiceMessage] to the [ServiceContext.Messages] list.\n   * @param ruleResult\n   */\n  publishRuleResult(ruleResult: RuleResult) {\n    const serviceMessage = new ServiceMessage(ruleResult.rulePolicy.name, ruleResult.rulePolicy.message, MessageType.Error);\n    serviceMessage.DisplayToUser = ruleResult.rulePolicy.isDisplayable;\n    serviceMessage.Source = this.actionName;\n\n    this.serviceContext.Messages.push(serviceMessage);\n    this.loggingService?.log(this.actionName, Severity.Error, `${serviceMessage.toString()}`);\n  }\n}\n","/**\n * Use to provide the alert type information for the AlertNotification and AlertComponent.\n */\nexport class AlertTypes {\n  public static readonly Information: string = 'alert-info';\n  public static readonly Warning: string = 'alert-warning';\n  public static readonly Danger: string = 'alert-danger';\n  public static readonly Success: string = 'alert-success';\n}\n","import { AlertTypes } from './alert-types.constants';\n\nexport class AlertNotification {\n  type: string = AlertTypes.Information; // alert-warning, alert-success, alert-info, alert-danger\n  header: string;\n  title: string;\n  messages: Array<string> = new Array<string>();\n  showAlert = false;\n\n  constructor(header: string, title: string, messages?: Array<string>, type?: string) {\n    if (type) {\n      this.type = type;\n    }\n\n    this.header = header;\n    this.title = title;\n    if (messages) {\n      this.messages = messages;\n    }\n\n    if (this.header && this.title) {\n      this.showAlert = true; // used to trigger the display of the notification.\n    }\n  }\n}\n","import { LoggingService } from '@buildmotion/logging';\nimport { Severity } from '@buildmotion/logging';\nimport { MessageType } from './models/MessageType';\nimport { ServiceContext } from './models/ServiceContext';\nimport { ServiceMessage } from './models/ServiceMessage';\n\n/**\n * Use the business provider base class to access common elements of the business provider.\n *\n * serviceContext: This is initialized for each instance of a business provider - its purpose is to collect information during the processing of business logic.\n */\nexport class BusinessProviderBase {\n  providerName: string;\n  serviceContext!: ServiceContext;\n  accessToken!: string;\n\n  constructor(providerName: string, public loggingService: LoggingService) {\n    this.providerName = providerName;\n    this.loggingService.log(\n      this.providerName,\n      Severity.Information,\n      `Running constructor for the [${this.providerName}].`\n    );\n  }\n\n  /**\n   * Use to handle an unexpected error in the application. The error should implement\n   * the specified interface. The method will add a new [ServiceMessage] to the\n   * specified [ServiceContext].\n   * @param error An unexpected application error that implements the [Error] interface.\n   *\n   * interface Error {\n   *  name: string;\n   *  message: string;\n   *  stack?: string;\n   * }\n   */\n  handleUnexpectedError(error: Error): void {\n    const message = new ServiceMessage(error.name, error.message)\n      .WithDisplayToUser(true)\n      .WithMessageType(MessageType.Error)\n      .WithSource(this.providerName);\n\n    const logItem = `${message.toString()}; ${error.stack}`;\n    this.loggingService.log(this.providerName, Severity.Error, logItem);\n\n    this.serviceContext.addMessage(message);\n  }\n\n  finishRequest(sourceName: string): void {\n    this.loggingService.log(\n      this.providerName,\n      Severity.Information,\n      `Request for [${sourceName}] by ${this.providerName} is complete.`\n    );\n    if (this.serviceContext.hasErrors()) {\n      this.loggingService.log(\n        this.providerName,\n        Severity.Information,\n        `Preparing to write out the errors.`\n      );\n      this.serviceContext.Messages.filter(\n        (f) => f.DisplayToUser && f.MessageType === MessageType.Error\n      ).forEach((e) =>\n        this.loggingService.log(this.providerName, Severity.Error, e.toString())\n      );\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Inject, OnDestroy } from '@angular/core';\nimport { AbstractControl, FormGroup } from '@angular/forms';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { LoggingService, Severity } from '@buildmotion/logging';\nimport { Guid } from 'guid-typescript';\nimport { Subscription } from 'rxjs';\nimport { AlertNotification } from './models/alert-notification.model';\nimport { AlertTypes } from './models/alert-types.constants';\nimport { ErrorResponse } from './models/error-response.model';\nimport { MessageType } from './models/MessageType';\nimport { ServiceContext } from './models/ServiceContext';\n\ndeclare global {\n  interface Window { _paq: any; }\n}\n@Inject({})\nexport class ComponentBase implements OnDestroy {\n  componentName: string;\n  alertNotification: AlertNotification;\n  navSubscription: Subscription = new Subscription();\n  currentUrl!: string;\n  previousUrl!: string;\n  id: Guid = Guid.create();\n  subscriptions: Array<Subscription> = [];\n\n  constructor(componentName: string, public loggingService: LoggingService, public router: Router) {\n    this.componentName = componentName;\n    this.alertNotification = new AlertNotification('', '');\n\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to load [${this.componentName}] component.`, [`ComponentId:${this.id}`]);\n  }\n\n  /**\n   * Add a subscription to the component\n   * @param subscription\n   */\n  subscribe(subscription: Subscription) {\n    this.subscriptions.push(subscription)\n  }\n\n  /**\n   * Unsubscribe to any registered subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((sub) => {\n      if (sub && typeof sub.unsubscribe === 'function') {\n        sub.unsubscribe();\n      }\n    });\n  }\n\n  /**\n   * Use to set the URLs for when navigation ends. Provides the values\n   * for the current and previous URL paths.\n   * @param event Is a [NavigationEnd] type.\n   */\n  private updateUrls(event: NavigationEnd) {\n    if (event.urlAfterRedirects) {\n      this.previousUrl = this.currentUrl;\n      this.currentUrl = event.urlAfterRedirects;\n    }\n  }\n\n  /**\n   * Use to send an analytic event to [Google Analytics].\n   * @param category A category is a name that you supply as a way to group objects that you want to track. Typically,\n   * you will use the same category name multiple times over related UI elements that you want to group under a given category.\n   * @param action Use the action parameter to name the type of event or interaction you want to track for a particular\n   * web object (i.e., play, stop, pause, download). A unique event is determined by a unique action name. You can use\n   * duplicate action names across categories, but this can affect how unique events are calculated. See the suggestions\n   * below and the Implicit Count section for more details.\n   * @param label Provide additional information for events that you want to track, such as the movie title in the\n   * video examples above, or the name of a file when tracking downloads. All labels are listed independently from\n   * their parent categories and actions. This provides you with another useful way to segment the event data for\n   * your reports. All labels are listed independently from their parent categories and actions. This provides you\n   * with another useful way to segment the event data for your reports.\n   * @param value Any numeric value indicating a [value] that will be summarized for the analytic item(s).\n   *\n   * More information at: https://support.google.com/analytics/answer/1033068\n   * or https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n   */\n  public googleAnalyticsSendEvent(category: string, action: string, label: string, value: number) {\n    (<any>window).gtag('event', action, {\n      event_category: category,\n      event_label: label,\n      value: value,\n    });\n  }\n\n\n\n  /**\n   * Use to create a simple [ErrorResponse] with the specified message.\n   * @param message The message to display to the user.\n   */\n  createErrorResponse(message: string): ErrorResponse {\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to create error response for component.`);\n    const errorResponse: ErrorResponse = new ErrorResponse();\n    errorResponse.Message = message;\n    return errorResponse;\n  }\n\n  /**\n   * Use to handle service errors. These are error response [See: ErrorResponse] from\n   * the application business layers (Action(s) or Http) that will bubble up to the\n   * caller (i.e., a component) in a specified format:\n   *\n   * IsSuccess = false; // default for ErrorResponse\n   * Message: string;\n   * Errors: Array<ServiceError> = new Array<ServiceError>();\n   * Exception: any;\n   */\n  handleServiceErrors(errorResponse: ErrorResponse, serviceContext?: ServiceContext) {\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to handle service errors for component.`);\n    if (serviceContext && serviceContext.hasErrors()) {\n      this.loggingService.log(this.componentName, Severity.Information, `Retrieving error messages from the ServiceContext/ValidationContext;`);\n      const messages = this.retrieveServiceContextErrorMessages(serviceContext);\n      this.alertNotification = new AlertNotification('Errors', errorResponse.Message, messages, AlertTypes.Warning);\n    } else {\n      if (errorResponse && errorResponse.Message) {\n        this.loggingService.log(this.componentName, Severity.Information, `Retrieving error messages from the [ErrorResponse].`);\n        const errors = this.retrieveResponseErrorMessages(errorResponse);\n        this.alertNotification = new AlertNotification('Error', errorResponse.Message, errors, AlertTypes.Warning);\n        this.loggingService.log(this.componentName, Severity.Error, `Error: ${errorResponse.Message}`);\n      }\n    }\n  }\n\n  /**\n   * Use to mark the form as touched; includes all form controls;\n   */\n  protected markFormAsTouched(form: FormGroup) {\n    form.markAsTouched({ onlySelf: false });\n\n    (<any>Object).values(form.controls).forEach((control: AbstractControl) => {\n      control.markAsTouched();\n    });\n  }\n\n  /**\n   * Use to log an unexpected error.\n   */\n  protected logError(error: any, message: string) {\n    if (error instanceof Error) {\n      this.loggingService.log(this.componentName, Severity.Error, message, [`${error.stack}`]);\n    } else {\n      this.loggingService.log(this.componentName, Severity.Error, message);\n    }\n  }\n\n  /**\n   * Use to retrieve the error messages from the specified [ServiceContext].\n   *\n   * @parm: serviceContext: A context object containing messages for the specified request.\n   */\n  retrieveServiceContextErrorMessages(serviceContext: ServiceContext): Array<string> {\n    const messages = Array<string>();\n    serviceContext.Messages.forEach((e) => {\n      if (e.MessageType === MessageType.Error && e.DisplayToUser) {\n        messages.push(e.Message);\n      }\n    });\n    return messages;\n  }\n\n  /**\n   * Use to retrieve the error messages from the specified Web API response.\n   */\n  retrieveResponseErrorMessages(errorResponse: ErrorResponse) {\n    const errors = new Array<string>();\n    if (errorResponse && errorResponse.Errors) {\n      errorResponse.Errors.forEach((e) => {\n        if (e.DisplayToUser) {\n          errors.push(e.Message);\n        }\n      });\n    }\n    return errors;\n  }\n\n  /**\n   * Use to reset the [AlertNotification] to the initial state. Removes\n   * existing messages and hides the AlertComponent.\n   */\n  resetAlertNotifications() {\n    this.alertNotification = new AlertNotification('', '');\n  }\n\n  /**\n   * Use to navigate to the specified route.\n   * @parm routeName The name of the target route.\n   */\n  public routeTo(routeName: string) {\n    try {\n      this.router.navigate([routeName]);\n    } catch (error: any) {\n      this.loggingService.log(\n        this.componentName,\n        Severity.Error,\n        `Error while attempting to navigate to [${routeName}] route from ${this.componentName}. Error: ${error.message.toString()}`\n      );\n    }\n  }\n\n  /**\n   * Use to retrieve and show any response error messages.\n   */\n  showResponseErrors(response: ErrorResponse) {\n    this.handleServiceErrors(response, undefined);\n  }\n\n  finishRequest(message: string): void {\n    this.loggingService.log(this.componentName, Severity.Information, `${this.componentName}: ${message}`);\n  }\n\n  protected showAlertMessage(message: string): void {\n    alert(message);\n  }\n}\n","import { Inject, OnDestroy } from '@angular/core';\nimport { ApiResponse } from '@buildmotion/core';\nimport { ILoggingService, LoggingService, Severity } from '@buildmotion/logging';\nimport { Guid } from 'guid-typescript';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { ErrorResponse } from './models/error-response.model';\nimport { MessageType } from './models/MessageType';\nimport { ServiceContext } from './models/ServiceContext';\nimport { ServiceMessage } from './models/ServiceMessage';\n\n/**\n * Use the [ServiceBase] to provide common behavior for Angular\n * services.\n */\n@Inject({})\nexport class ServiceBase implements OnDestroy {\n  accessToken = '';\n  id: string = Guid.create().toString();\n  private subscriptions: Array<Subscription> = [];\n\n  /**\n   * Use the constructor to provide required elements to the base class.\n   *\n   * @param loggingService The [LoggingService] is a required dependency of this\n   * class. It should be injected into any Angular Services that extend from\n   * this base class. It will allow the members of the base class to log information\n   * using the common LoggingService.\n   */\n  constructor(\n    public serviceName: string,\n    @Inject(LoggingService) public loggingService: ILoggingService,\n    public serviceContext: ServiceContext) {\n    this.loggingService.log(this.serviceName, Severity.Information, `Initializing ${this.serviceName} at ${Date.now()} with id: ${this.id}`);\n  }\n\n  /**\n   * Use to extract the contents of the HTTP body and return a JSON\n   * representation of the data.\n   * @param response: contains the HTTP response.\n   */\n  extractData(response: Response) {\n    const body = response.json();\n    return body || {};\n  }\n\n  /**\n   * Use to handle an unexpected error in the application. The error should implement\n   * the specified interface. The method will add a new [ServiceMessage] to the\n   * specified [ServiceContext].\n   * @param error An unexpected application error that implements the [Error] interface.\n   *\n   * interface Error {\n   *  name: string;\n   *  message: string;\n   *  stack?: string;\n   * }\n   */\n  handleUnexpectedError(error: Error): void {\n    const message = new ServiceMessage(error.name, error.message).WithDisplayToUser(false).WithMessageType(MessageType.Error).WithSource(this.serviceName);\n\n    const tags: string[] = [`${this.serviceName}`];\n    const logItem = `${message.toString()}; ${error.stack}`;\n    this.loggingService.log(this.serviceName, Severity.Error, logItem, tags);\n\n    this.serviceContext.addMessage(message);\n  }\n\n  /**\n   * Use to handle an error that contains a [name] and a [message].\n   * @param error\n   */\n  handleError(error: { name: string; message: string | undefined }): void {\n    const message = new ServiceMessage(error.name, error.message).WithDisplayToUser(false).WithMessageType(MessageType.Error).WithSource(this.serviceName);\n    const tags: string[] = [`${this.serviceName}`];\n    this.loggingService.log(this.serviceName, Severity.Error, message.toString(), tags);\n    this.serviceContext.addMessage(message);\n  }\n\n  /**\n   * Use to create a new [ErrorResponse] with the specified message.\n   * @param message The message for the specified [ErrorResponse].\n   */\n  createErrorResponse(message: string): ErrorResponse {\n    const response: ErrorResponse = new ErrorResponse();\n    response.Message = message;\n    return response;\n  }\n\n  /**\n   * Use to create a API Response.\n   *\n   * @param message a simple message related to the operation (not for user notifications).\n   * @param data the data payload (if any) for the response.\n   * @returns Observable<ApiResponse<T>>\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  createAPIResponse<T>(message: string, data?: any, isSuccess = true): Observable<ApiResponse<T>> {\n    const response: ApiResponse<T> = {\n      id: Guid.create().toString(),\n      isSuccess: isSuccess,\n      data: data,\n      message,\n      messages: [],\n      timestamp: new Date()\n    }\n    return of(response);\n  }\n\n  /**\n   * Use a generic method to finish service requests that return [Observables].\n   * @param sourceName\n   */\n  finishRequest(sourceName: string): void {\n    this.loggingService.log(this.serviceName, Severity.Information, `Request for [${sourceName}] by ${this.serviceName} is complete.`);\n    if (this.serviceContext.hasErrors()) {\n      this.loggingService.log(this.serviceName, Severity.Information, `Preparing to write any messages.`);\n      this.serviceContext.Messages.filter((f) => f.MessageType === MessageType.Error && f.DisplayToUser).forEach((e) =>\n        this.loggingService.log(this.serviceName, Severity.Error, e.toString())\n      );\n    }\n  }\n\n  logError(error: any, errorMessage: string) {\n    this.loggingService.log(this.serviceName, Severity.Error, `${errorMessage}; Error: ${error.message}`);\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeAllSubscriptions()\n  }\n\n  /**\n   * Use to reset the service context when you want to clear messages from the [ServiceContext]. If you want to\n   * append messages from subsequent service calls, do not use this method.\n   */\n  resetServiceContext() {\n    this.loggingService.log(this.serviceName, Severity.Information, `Preparing to reset the Messages of the current [ServiceContext].`);\n    if (this.serviceContext && this.serviceContext.Messages) {\n      if (this.serviceContext.Messages.length > 0) {\n        this.loggingService.log(this.serviceName, Severity.Information, `Resetting the Messages of the current [ServiceContext].`);\n        this.serviceContext.Messages = new Array<ServiceMessage>();\n      } else {\n        this.loggingService.log(this.serviceName, Severity.Information, `The current [ServiceContext] does not contain any [Messages].`);\n      }\n    } else {\n      this.loggingService.log(this.serviceName, Severity.Warning, `The current [ServiceContext] is not valid.`);\n    }\n    this.loggingService.log(this.serviceName, Severity.Information, `Finished  processing request to [reset] the Messages of the current [ServiceContext].`);\n  }\n\n  /**\n   * Register a Subscription\n   * @param subscription\n   */\n  subscribe(subscription: Subscription) {\n    this.subscriptions.push(subscription);\n  }\n\n  /**\n   * Unsubscribe all Subjections\n   */\n  unsubscribeAllSubscriptions() {\n    this.subscriptions.forEach((sub) => {\n      if (sub && typeof sub.unsubscribe === 'function') {\n        sub.unsubscribe();\n      }\n    })\n  }\n\n  /**\n   * Use to write the current messages contained in the [ServiceContext]. Written messages are limited\n   * to items that are marked as [DisplayToUser = true].\n   */\n  writeMessages() {\n    if (this.serviceContext && this.serviceContext.Messages) {\n      this.serviceContext.Messages.forEach((e) => {\n        if (e.MessageType === MessageType.Error && e.DisplayToUser) {\n          this.loggingService.log(this.serviceName, Severity.Error, e.toString());\n        }\n      });\n    }\n  }\n}\n","/**\n * Use this model to represent service error/message information from the\n * application's service APIs.\n *\n * The DisplayToUser boolean value indicates whether the message should be\n * displayed to the user if desired.\n */\nexport class ServiceError {\n  DisplayToUser!: boolean;\n  Exception: any;\n  Message!: string;\n  Name!: string;\n  Source!: string;\n  Target!: string;\n}\n","import { Type, inject, InjectFlags } from '@angular/core';\nimport { ServiceBase } from './service-base';\nimport { LoggingService } from '@buildmotion/logging';\nimport { ServiceContext } from './models/ServiceContext';\n\nexport class SingletonServiceBase extends ServiceBase {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(type: Type<any>, loggingService: LoggingService, serviceName: string, serviceContext: ServiceContext) {\n    super(serviceName, loggingService, serviceContext);\n    // eslint-disable-next-line no-bitwise\n    const parent = inject(type, InjectFlags.Optional | InjectFlags.SkipSelf);\n    if (parent) {\n      throw Error(`Cannot create multiple instances of provider: [${type}]`);\n    }\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}