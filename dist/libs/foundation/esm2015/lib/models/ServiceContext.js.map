{"version":3,"file":"ServiceContext.js","sourceRoot":"","sources":["../../../../../../libs/foundation/src/lib/models/ServiceContext.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;AAE3C;;;;GAIG;AAIH,MAAM,OAAO,cAAc;IAH3B;QAIE;;;WAGG;QACH,aAAQ,GAA0B,IAAI,KAAK,EAAkB,CAAC;KAkC/D;IAhCC;;OAEG;IACH,UAAU,CAAC,OAAuB;QAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH,SAAS;QACP,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7C,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,KAAK,CAAC,CAAC;YACvF,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC5B,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7C,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,KAAK,CAAC,CAAC;YACvF,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC5B,OAAO,KAAK,CAAC;aACd;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;;4GAtCU,cAAc;gHAAd,cAAc,cAFb,MAAM;4FAEP,cAAc;kBAH1B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { ServiceMessage } from './ServiceMessage';\nimport { MessageType } from './MessageType';\nimport { Injectable } from '@angular/core';\n\n/**\n * Use this class to manage the context of a single service call. This\n * class will contain a list of any service messages added during the processing\n * of a service request.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServiceContext {\n  /**\n   * A list of service messages added by the application during the processing of the\n   * specified service request.\n   */\n  Messages: Array<ServiceMessage> = new Array<ServiceMessage>();\n\n  /**\n   * Use this method to add a new message to the [ServiceContext].\n   */\n  addMessage(message: ServiceMessage) {\n    this.Messages.push(message);\n  }\n\n  /**\n   * Use to determine if the current [ServiceContext] contains any messages with type of [Error].\n   */\n  hasErrors(): boolean {\n    if (this.Messages && this.Messages.length > 0) {\n      const errorMessages = this.Messages.filter((f) => f.MessageType === MessageType.Error);\n      if (errorMessages.length > 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Use to determine if the current [ServiceContext] does not contain any errors.\n   */\n  isGood(): boolean {\n    if (this.Messages && this.Messages.length > 0) {\n      const errorMessages = this.Messages.filter((f) => f.MessageType === MessageType.Error);\n      if (errorMessages.length > 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"]}