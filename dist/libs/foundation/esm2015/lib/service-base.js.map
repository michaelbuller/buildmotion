{"version":3,"file":"service-base.js","sourceRoot":"","sources":["../../../../../libs/foundation/src/lib/service-base.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, OnDestroy } from '@angular/core';\nimport { ApiResponse } from '@buildmotion/core';\nimport { ILoggingService, LoggingService, Severity } from '@buildmotion/logging';\nimport { Guid } from 'guid-typescript';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { ErrorResponse } from './models/error-response.model';\nimport { MessageType } from './models/MessageType';\nimport { ServiceContext } from './models/ServiceContext';\nimport { ServiceMessage } from './models/ServiceMessage';\n\n/**\n * Use the [ServiceBase] to provide common behavior for Angular\n * services.\n */\n@Inject({})\nexport class ServiceBase implements OnDestroy {\n  accessToken = '';\n  id: string = Guid.create().toString();\n  private subscriptions: Array<Subscription> = [];\n\n  /**\n   * Use the constructor to provide required elements to the base class.\n   *\n   * @param loggingService The [LoggingService] is a required dependency of this\n   * class. It should be injected into any Angular Services that extend from\n   * this base class. It will allow the members of the base class to log information\n   * using the common LoggingService.\n   */\n  constructor(\n    public serviceName: string,\n    @Inject(LoggingService) public loggingService: ILoggingService,\n    public serviceContext: ServiceContext) {\n    this.loggingService.log(this.serviceName, Severity.Information, `Initializing ${this.serviceName} at ${Date.now()} with id: ${this.id}`);\n  }\n\n  /**\n   * Use to extract the contents of the HTTP body and return a JSON\n   * representation of the data.\n   * @param response: contains the HTTP response.\n   */\n  extractData(response: Response) {\n    const body = response.json();\n    return body || {};\n  }\n\n  /**\n   * Use to handle an unexpected error in the application. The error should implement\n   * the specified interface. The method will add a new [ServiceMessage] to the\n   * specified [ServiceContext].\n   * @param error An unexpected application error that implements the [Error] interface.\n   *\n   * interface Error {\n   *  name: string;\n   *  message: string;\n   *  stack?: string;\n   * }\n   */\n  handleUnexpectedError(error: Error): void {\n    const message = new ServiceMessage(error.name, error.message).WithDisplayToUser(false).WithMessageType(MessageType.Error).WithSource(this.serviceName);\n\n    const tags: string[] = [`${this.serviceName}`];\n    const logItem = `${message.toString()}; ${error.stack}`;\n    this.loggingService.log(this.serviceName, Severity.Error, logItem, tags);\n\n    this.serviceContext.addMessage(message);\n  }\n\n  /**\n   * Use to handle an error that contains a [name] and a [message].\n   * @param error\n   */\n  handleError(error: { name: string; message: string | undefined }): void {\n    const message = new ServiceMessage(error.name, error.message).WithDisplayToUser(false).WithMessageType(MessageType.Error).WithSource(this.serviceName);\n    const tags: string[] = [`${this.serviceName}`];\n    this.loggingService.log(this.serviceName, Severity.Error, message.toString(), tags);\n    this.serviceContext.addMessage(message);\n  }\n\n  /**\n   * Use to create a new [ErrorResponse] with the specified message.\n   * @param message The message for the specified [ErrorResponse].\n   */\n  createErrorResponse(message: string): ErrorResponse {\n    const response: ErrorResponse = new ErrorResponse();\n    response.Message = message;\n    return response;\n  }\n\n  /**\n   * Use to create a API Response.\n   *\n   * @param message a simple message related to the operation (not for user notifications).\n   * @param data the data payload (if any) for the response.\n   * @returns Observable<ApiResponse<T>>\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  createAPIResponse<T>(message: string, data?: any, isSuccess = true): Observable<ApiResponse<T>> {\n    const response: ApiResponse<T> = {\n      id: Guid.create().toString(),\n      isSuccess: isSuccess,\n      data: data,\n      message,\n      messages: [],\n      timestamp: new Date()\n    }\n    return of(response);\n  }\n\n  /**\n   * Use a generic method to finish service requests that return [Observables].\n   * @param sourceName\n   */\n  finishRequest(sourceName: string): void {\n    this.loggingService.log(this.serviceName, Severity.Information, `Request for [${sourceName}] by ${this.serviceName} is complete.`);\n    if (this.serviceContext.hasErrors()) {\n      this.loggingService.log(this.serviceName, Severity.Information, `Preparing to write any messages.`);\n      this.serviceContext.Messages.filter((f) => f.MessageType === MessageType.Error && f.DisplayToUser).forEach((e) =>\n        this.loggingService.log(this.serviceName, Severity.Error, e.toString())\n      );\n    }\n  }\n\n  logError(error: any, errorMessage: string) {\n    this.loggingService.log(this.serviceName, Severity.Error, `${errorMessage}; Error: ${error.message}`);\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeAllSubscriptions()\n  }\n\n  /**\n   * Use to reset the service context when you want to clear messages from the [ServiceContext]. If you want to\n   * append messages from subsequent service calls, do not use this method.\n   */\n  resetServiceContext() {\n    this.loggingService.log(this.serviceName, Severity.Information, `Preparing to reset the Messages of the current [ServiceContext].`);\n    if (this.serviceContext && this.serviceContext.Messages) {\n      if (this.serviceContext.Messages.length > 0) {\n        this.loggingService.log(this.serviceName, Severity.Information, `Resetting the Messages of the current [ServiceContext].`);\n        this.serviceContext.Messages = new Array<ServiceMessage>();\n      } else {\n        this.loggingService.log(this.serviceName, Severity.Information, `The current [ServiceContext] does not contain any [Messages].`);\n      }\n    } else {\n      this.loggingService.log(this.serviceName, Severity.Warning, `The current [ServiceContext] is not valid.`);\n    }\n    this.loggingService.log(this.serviceName, Severity.Information, `Finished  processing request to [reset] the Messages of the current [ServiceContext].`);\n  }\n\n  /**\n   * Register a Subscription\n   * @param subscription\n   */\n  subscribe(subscription: Subscription) {\n    this.subscriptions.push(subscription);\n  }\n\n  /**\n   * Unsubscribe all Subjections\n   */\n  unsubscribeAllSubscriptions() {\n    this.subscriptions.forEach((sub) => {\n      if (sub && typeof sub.unsubscribe === 'function') {\n        sub.unsubscribe();\n      }\n    })\n  }\n\n  /**\n   * Use to write the current messages contained in the [ServiceContext]. Written messages are limited\n   * to items that are marked as [DisplayToUser = true].\n   */\n  writeMessages() {\n    if (this.serviceContext && this.serviceContext.Messages) {\n      this.serviceContext.Messages.forEach((e) => {\n        if (e.MessageType === MessageType.Error && e.DisplayToUser) {\n          this.loggingService.log(this.serviceName, Severity.Error, e.toString());\n        }\n      });\n    }\n  }\n}\n"]}