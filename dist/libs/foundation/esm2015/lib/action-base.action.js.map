{"version":3,"file":"action-base.action.js","sourceRoot":"","sources":["../../../../../libs/foundation/src/lib/action-base.action.ts"],"names":[],"mappings":"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","sourcesContent":["import { Action, ActionResult } from '@buildmotion/actions';\nimport { ApiMessage, ApiMessageType, ApiResponse } from '@buildmotion/core';\nimport { Severity, ILoggingService } from '@buildmotion/logging';\nimport { CompositeRule, RuleResult, ValidationContext } from '@buildmotion/rules-engine';\nimport { Observable, of, throwError } from 'rxjs';\nimport { ErrorResponse } from './models/error-response.model';\nimport { MessageType } from './models/MessageType';\nimport { ServiceContext } from './models/ServiceContext';\nimport { ServiceMessage } from './models/ServiceMessage';\n\n/**\n * This is the application's base Action class that provides implementation of pipeline methods - pre/post\n * execution methods.\n *\n * The pre-execute methods that can be implemented are:\n *\t\t1. start();\n *\t\t2. audit();\n *\t\t3. preValidateAction();\n *\t\t4. evaluateRules();\n *\t\t5. postValidateAction();\n *\t\t6. preExecuteAction();\n *\n *If the status of action is good, the business logic will be executed using the:\n *\t\t1. processAction();\n *\n * The post-execution methods that can be implemented are:\n *\t\t1. postExecuteAction();\n *\t\t2. validateActionResult();\n *\t\t3. finish();\n */\nexport class ActionBase<T> extends Action {\n  serviceContext: ServiceContext = new ServiceContext();\n  response: Observable<T> | any = this.createUnknownResponse();\n  loggingService?: ILoggingService;\n  actionName!: string;\n\n  constructor(actionName?: string) {\n    super();\n    this.actionName = actionName ?? '';\n  }\n\n  start() {\n    // this.loggingService?.log(\n    //   this.actionName,\n    //   Severity.Information,\n    //   `Preparing to [start] action.`\n    // );\n  }\n\n  audit() {\n    this.loggingService?.log(this.actionName, Severity.Information, `Preparing to [audit] action.`);\n  }\n\n  createUnknownResponse(): Observable<any> | any {\n    const response = new ApiResponse();\n    return of(response);\n  }\n\n  preExecuteAction() {\n    this.loggingService?.log(this.actionName, Severity.Information, `Preparing to [preExecuteAction] action.`);\n  }\n\n  performAction() {\n    this.loggingService?.log(this.actionName, Severity.Information, `Preparing to perform [${this.actionName}].`);\n  }\n\n  preValidateAction() {\n    this.loggingService?.log(this.actionName, Severity.Information, `Preparing to preValidateAction [${this.actionName}].`);\n  }\n\n  finish() {\n    this.loggingService?.log(this.actionName, Severity.Information, `Preparing to [finish] action.`);\n  }\n\n  /**\n   * This is a required implementation if you want to render/execute the rules that\n   * are associated to the specified action.\n   */\n  validateAction(): ValidationContext {\n    return this.validationContext.renderRules();\n  }\n\n  postValidateAction() {\n    this.loggingService?.log(this.actionName, Severity.Information, `Preparing to determine if the action contains validation errors in ${this.actionName}`);\n\n    if (this.validationContext.hasRuleViolations()) {\n      this.loggingService?.log(this.actionName, Severity.Information, `The target contains validation errors in ${this.actionName}`);\n\n      // Load the error/rule violations into the ServiceContext so that the information bubbles up to the caller of the service;\n      this.validationContext.results.forEach((result) => {\n        if (!result.isValid) {\n          this.publishRuleResult(result);\n          this.retrieveRuleDetails(result);\n        }\n      });\n\n      this.response = this.createFailResponse();\n    }\n  }\n\n  createFailResponse(): Observable<ApiResponse<T>> {\n    const apiResponse = new ApiResponse<T>();\n    apiResponse.isSuccess = false;\n    apiResponse.message = `Request failed.`;\n\n    const messages = new Array<ApiMessage>();\n    if (this.serviceContext.hasErrors() && this.serviceContext.Messages.length > 0) {\n      this.serviceContext.Messages.map((m) => {\n        const error = new ApiMessage();\n        error.message = m.Message;\n        error.messageType = ApiMessageType.Error;\n        error.code = m.Name;\n\n        messages.push(error);\n      });\n    }\n    apiResponse.messages = messages.length > 0 ? messages : [];\n    return of(apiResponse);\n  }\n\n  postExecuteAction() {\n    if (this.actionResult === ActionResult.Fail) {\n      this.serviceContext.Messages.forEach((e) => {\n        if (e.MessageType === MessageType.Error) {\n          this.loggingService?.log(this.actionName, Severity.Error, e.toString());\n        }\n      });\n    }\n  }\n\n  /**\n   * All concrete actions must override and implement this method. It is defined in the [Action] framework class.\n   */\n  validateActionResult(): ActionResult {\n    this.loggingService?.log(this.actionName, Severity.Information, `Running [validateActionResult] for ${this.actionName}.`);\n    // determine the status of the action based on any rule violations;\n    if (this.validationContext.hasRuleViolations()) {\n      this.loggingService?.log(this.actionName, Severity.Error, `The ${this.actionName} contains rule violations.`);\n      this.actionResult = ActionResult.Fail;\n\n      const errorResponse = new ErrorResponse();\n      errorResponse.IsSuccess = false;\n      errorResponse.Message = `Validation errors exist.`;\n      this.response = throwError(errorResponse);\n    }\n    this.actionResult = this.serviceContext.isGood() ? ActionResult.Success : ActionResult.Fail;\n    return this.actionResult;\n  }\n\n  /**\n   * Use to process rule results for composite rules. Note, that this function is recursive\n   * and will process all composite rules in the rule set contained in the ValidationContext.\n   * @param ruleResult The result of a rendered rule.\n   */\n  retrieveRuleDetails(ruleResult: RuleResult) {\n    if (ruleResult.rulePolicy instanceof CompositeRule) {\n      const composite = ruleResult.rulePolicy as CompositeRule;\n      if (composite && composite.hasErrors) {\n        const errors = composite.results.filter((result) => !result.isValid && result.rulePolicy && result.rulePolicy.isDisplayable);\n\n        errors.forEach((errorResult) => {\n          this.publishRuleResult(errorResult);\n\n          if (errorResult.rulePolicy instanceof CompositeRule) {\n            this.retrieveRuleDetails(errorResult);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * A helper function to publish a new [ServiceMessage] to the [ServiceContext.Messages] list.\n   * @param ruleResult\n   */\n  publishRuleResult(ruleResult: RuleResult) {\n    const serviceMessage = new ServiceMessage(ruleResult.rulePolicy.name, ruleResult.rulePolicy.message, MessageType.Error);\n    serviceMessage.DisplayToUser = ruleResult.rulePolicy.isDisplayable;\n    serviceMessage.Source = this.actionName;\n\n    this.serviceContext.Messages.push(serviceMessage);\n    this.loggingService?.log(this.actionName, Severity.Error, `${serviceMessage.toString()}`);\n  }\n}\n"]}