{"version":3,"file":"business-provider-base.service.js","sourceRoot":"","sources":["../../../../../libs/foundation/src/lib/business-provider-base.service.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAEnD,OAAO,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AAEzD;;;;GAIG;AACH,MAAM,OAAO,oBAAoB;IAK/B,YAAY,YAAoB,EAAS,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QACrE,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,cAAc,CAAC,GAAG,CACrB,IAAI,CAAC,YAAY,EACjB,QAAQ,CAAC,WAAW,EACpB,gCAAgC,IAAI,CAAC,YAAY,IAAI,CACtD,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;OAWG;IACH,qBAAqB,CAAC,KAAY;QAChC,MAAM,OAAO,GAAG,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC;aAC1D,iBAAiB,CAAC,IAAI,CAAC;aACvB,eAAe,CAAC,WAAW,CAAC,KAAK,CAAC;aAClC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAEjC,MAAM,OAAO,GAAG,GAAG,OAAO,CAAC,QAAQ,EAAE,KAAK,KAAK,CAAC,KAAK,EAAE,CAAC;QACxD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAEpE,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED,aAAa,CAAC,UAAkB;QAC9B,IAAI,CAAC,cAAc,CAAC,GAAG,CACrB,IAAI,CAAC,YAAY,EACjB,QAAQ,CAAC,WAAW,EACpB,gBAAgB,UAAU,QAAQ,IAAI,CAAC,YAAY,eAAe,CACnE,CAAC;QACF,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE;YACnC,IAAI,CAAC,cAAc,CAAC,GAAG,CACrB,IAAI,CAAC,YAAY,EACjB,QAAQ,CAAC,WAAW,EACpB,oCAAoC,CACrC,CAAC;YACF,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CACjC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,IAAI,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,KAAK,CAC9D,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CACd,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CACzE,CAAC;SACH;IACH,CAAC;CACF","sourcesContent":["import { LoggingService } from '@buildmotion/logging';\nimport { Severity } from '@buildmotion/logging';\nimport { MessageType } from './models/MessageType';\nimport { ServiceContext } from './models/ServiceContext';\nimport { ServiceMessage } from './models/ServiceMessage';\n\n/**\n * Use the business provider base class to access common elements of the business provider.\n *\n * serviceContext: This is initialized for each instance of a business provider - its purpose is to collect information during the processing of business logic.\n */\nexport class BusinessProviderBase {\n  providerName: string;\n  serviceContext!: ServiceContext;\n  accessToken!: string;\n\n  constructor(providerName: string, public loggingService: LoggingService) {\n    this.providerName = providerName;\n    this.loggingService.log(\n      this.providerName,\n      Severity.Information,\n      `Running constructor for the [${this.providerName}].`\n    );\n  }\n\n  /**\n   * Use to handle an unexpected error in the application. The error should implement\n   * the specified interface. The method will add a new [ServiceMessage] to the\n   * specified [ServiceContext].\n   * @param error An unexpected application error that implements the [Error] interface.\n   *\n   * interface Error {\n   *  name: string;\n   *  message: string;\n   *  stack?: string;\n   * }\n   */\n  handleUnexpectedError(error: Error): void {\n    const message = new ServiceMessage(error.name, error.message)\n      .WithDisplayToUser(true)\n      .WithMessageType(MessageType.Error)\n      .WithSource(this.providerName);\n\n    const logItem = `${message.toString()}; ${error.stack}`;\n    this.loggingService.log(this.providerName, Severity.Error, logItem);\n\n    this.serviceContext.addMessage(message);\n  }\n\n  finishRequest(sourceName: string): void {\n    this.loggingService.log(\n      this.providerName,\n      Severity.Information,\n      `Request for [${sourceName}] by ${this.providerName} is complete.`\n    );\n    if (this.serviceContext.hasErrors()) {\n      this.loggingService.log(\n        this.providerName,\n        Severity.Information,\n        `Preparing to write out the errors.`\n      );\n      this.serviceContext.Messages.filter(\n        (f) => f.DisplayToUser && f.MessageType === MessageType.Error\n      ).forEach((e) =>\n        this.loggingService.log(this.providerName, Severity.Error, e.toString())\n      );\n    }\n  }\n}\n"]}