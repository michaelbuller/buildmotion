{"version":3,"file":"component-base.component.js","sourceRoot":"","sources":["../../../../../libs/foundation/src/lib/component-base.component.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Inject, OnDestroy } from '@angular/core';\nimport { AbstractControl, FormGroup } from '@angular/forms';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { LoggingService, Severity } from '@buildmotion/logging';\nimport { Guid } from 'guid-typescript';\nimport { Subscription } from 'rxjs';\nimport { AlertNotification } from './models/alert-notification.model';\nimport { AlertTypes } from './models/alert-types.constants';\nimport { ErrorResponse } from './models/error-response.model';\nimport { MessageType } from './models/MessageType';\nimport { ServiceContext } from './models/ServiceContext';\n\ndeclare global {\n  interface Window { _paq: any; }\n}\n@Inject({})\nexport class ComponentBase implements OnDestroy {\n  componentName: string;\n  alertNotification: AlertNotification;\n  navSubscription: Subscription = new Subscription();\n  currentUrl!: string;\n  previousUrl!: string;\n  id: Guid = Guid.create();\n  subscriptions: Array<Subscription> = [];\n\n  constructor(componentName: string, public loggingService: LoggingService, public router: Router) {\n    this.componentName = componentName;\n    this.alertNotification = new AlertNotification('', '');\n\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to load [${this.componentName}] component.`, [`ComponentId:${this.id}`]);\n  }\n\n  /**\n   * Add a subscription to the component\n   * @param subscription\n   */\n  subscribe(subscription: Subscription) {\n    this.subscriptions.push(subscription)\n  }\n\n  /**\n   * Unsubscribe to any registered subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((sub) => {\n      if (sub && typeof sub.unsubscribe === 'function') {\n        sub.unsubscribe();\n      }\n    });\n  }\n\n  /**\n   * Use to set the URLs for when navigation ends. Provides the values\n   * for the current and previous URL paths.\n   * @param event Is a [NavigationEnd] type.\n   */\n  private updateUrls(event: NavigationEnd) {\n    if (event.urlAfterRedirects) {\n      this.previousUrl = this.currentUrl;\n      this.currentUrl = event.urlAfterRedirects;\n    }\n  }\n\n  /**\n   * Use to send an analytic event to [Google Analytics].\n   * @param category A category is a name that you supply as a way to group objects that you want to track. Typically,\n   * you will use the same category name multiple times over related UI elements that you want to group under a given category.\n   * @param action Use the action parameter to name the type of event or interaction you want to track for a particular\n   * web object (i.e., play, stop, pause, download). A unique event is determined by a unique action name. You can use\n   * duplicate action names across categories, but this can affect how unique events are calculated. See the suggestions\n   * below and the Implicit Count section for more details.\n   * @param label Provide additional information for events that you want to track, such as the movie title in the\n   * video examples above, or the name of a file when tracking downloads. All labels are listed independently from\n   * their parent categories and actions. This provides you with another useful way to segment the event data for\n   * your reports. All labels are listed independently from their parent categories and actions. This provides you\n   * with another useful way to segment the event data for your reports.\n   * @param value Any numeric value indicating a [value] that will be summarized for the analytic item(s).\n   *\n   * More information at: https://support.google.com/analytics/answer/1033068\n   * or https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n   */\n  public googleAnalyticsSendEvent(category: string, action: string, label: string, value: number) {\n    (<any>window).gtag('event', action, {\n      event_category: category,\n      event_label: label,\n      value: value,\n    });\n  }\n\n\n\n  /**\n   * Use to create a simple [ErrorResponse] with the specified message.\n   * @param message The message to display to the user.\n   */\n  createErrorResponse(message: string): ErrorResponse {\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to create error response for component.`);\n    const errorResponse: ErrorResponse = new ErrorResponse();\n    errorResponse.Message = message;\n    return errorResponse;\n  }\n\n  /**\n   * Use to handle service errors. These are error response [See: ErrorResponse] from\n   * the application business layers (Action(s) or Http) that will bubble up to the\n   * caller (i.e., a component) in a specified format:\n   *\n   * IsSuccess = false; // default for ErrorResponse\n   * Message: string;\n   * Errors: Array<ServiceError> = new Array<ServiceError>();\n   * Exception: any;\n   */\n  handleServiceErrors(errorResponse: ErrorResponse, serviceContext?: ServiceContext) {\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to handle service errors for component.`);\n    if (serviceContext && serviceContext.hasErrors()) {\n      this.loggingService.log(this.componentName, Severity.Information, `Retrieving error messages from the ServiceContext/ValidationContext;`);\n      const messages = this.retrieveServiceContextErrorMessages(serviceContext);\n      this.alertNotification = new AlertNotification('Errors', errorResponse.Message, messages, AlertTypes.Warning);\n    } else {\n      if (errorResponse && errorResponse.Message) {\n        this.loggingService.log(this.componentName, Severity.Information, `Retrieving error messages from the [ErrorResponse].`);\n        const errors = this.retrieveResponseErrorMessages(errorResponse);\n        this.alertNotification = new AlertNotification('Error', errorResponse.Message, errors, AlertTypes.Warning);\n        this.loggingService.log(this.componentName, Severity.Error, `Error: ${errorResponse.Message}`);\n      }\n    }\n  }\n\n  /**\n   * Use to mark the form as touched; includes all form controls;\n   */\n  protected markFormAsTouched(form: FormGroup) {\n    form.markAsTouched({ onlySelf: false });\n\n    (<any>Object).values(form.controls).forEach((control: AbstractControl) => {\n      control.markAsTouched();\n    });\n  }\n\n  /**\n   * Use to log an unexpected error.\n   */\n  protected logError(error: any, message: string) {\n    if (error instanceof Error) {\n      this.loggingService.log(this.componentName, Severity.Error, message, [`${error.stack}`]);\n    } else {\n      this.loggingService.log(this.componentName, Severity.Error, message);\n    }\n  }\n\n  /**\n   * Use to retrieve the error messages from the specified [ServiceContext].\n   *\n   * @parm: serviceContext: A context object containing messages for the specified request.\n   */\n  retrieveServiceContextErrorMessages(serviceContext: ServiceContext): Array<string> {\n    const messages = Array<string>();\n    serviceContext.Messages.forEach((e) => {\n      if (e.MessageType === MessageType.Error && e.DisplayToUser) {\n        messages.push(e.Message);\n      }\n    });\n    return messages;\n  }\n\n  /**\n   * Use to retrieve the error messages from the specified Web API response.\n   */\n  retrieveResponseErrorMessages(errorResponse: ErrorResponse) {\n    const errors = new Array<string>();\n    if (errorResponse && errorResponse.Errors) {\n      errorResponse.Errors.forEach((e) => {\n        if (e.DisplayToUser) {\n          errors.push(e.Message);\n        }\n      });\n    }\n    return errors;\n  }\n\n  /**\n   * Use to reset the [AlertNotification] to the initial state. Removes\n   * existing messages and hides the AlertComponent.\n   */\n  resetAlertNotifications() {\n    this.alertNotification = new AlertNotification('', '');\n  }\n\n  /**\n   * Use to navigate to the specified route.\n   * @parm routeName The name of the target route.\n   */\n  public routeTo(routeName: string) {\n    try {\n      this.router.navigate([routeName]);\n    } catch (error) {\n      this.loggingService.log(\n        this.componentName,\n        Severity.Error,\n        `Error while attempting to navigate to [${routeName}] route from ${this.componentName}. Error: ${error.toString()}`\n      );\n    }\n  }\n\n  /**\n   * Use to retrieve and show any response error messages.\n   */\n  showResponseErrors(response: ErrorResponse) {\n    this.handleServiceErrors(response, undefined);\n  }\n\n  finishRequest(message: string): void {\n    this.loggingService.log(this.componentName, Severity.Information, `${this.componentName}: ${message}`);\n  }\n\n  protected showAlertMessage(message: string): void {\n    alert(message);\n  }\n}\n"]}