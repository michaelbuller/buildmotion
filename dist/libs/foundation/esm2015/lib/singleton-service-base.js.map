{"version":3,"file":"singleton-service-base.js","sourceRoot":"","sources":["../../../../../libs/foundation/src/lib/singleton-service-base.ts"],"names":[],"mappings":"AAAA,OAAO,EAAQ,MAAM,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAI7C,MAAM,OAAO,oBAAqB,SAAQ,WAAW;IACnD,8DAA8D;IAC9D,YAAY,IAAe,EAAE,cAA8B,EAAE,WAAmB,EAAE,cAA8B;QAC9G,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;QACnD,sCAAsC;QACtC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;QACzE,IAAI,MAAM,EAAE;YACV,MAAM,KAAK,CAAC,kDAAkD,IAAI,GAAG,CAAC,CAAC;SACxE;IACH,CAAC;CACF","sourcesContent":["import { Type, inject, InjectFlags } from '@angular/core';\nimport { ServiceBase } from './service-base';\nimport { LoggingService } from '@buildmotion/logging';\nimport { ServiceContext } from './models/ServiceContext';\n\nexport class SingletonServiceBase extends ServiceBase {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(type: Type<any>, loggingService: LoggingService, serviceName: string, serviceContext: ServiceContext) {\n    super(serviceName, loggingService, serviceContext);\n    // eslint-disable-next-line no-bitwise\n    const parent = inject(type, InjectFlags.Optional | InjectFlags.SkipSelf);\n    if (parent) {\n      throw Error(`Cannot create multiple instances of provider: [${type}]`);\n    }\n  }\n}\n"]}