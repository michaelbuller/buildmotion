import { Severity } from '@buildmotion/logging';
import { MessageType } from './models/MessageType';
import { ServiceMessage } from './models/ServiceMessage';
/**
 * Use the business provider base class to access common elements of the business provider.
 *
 * serviceContext: This is initialized for each instance of a business provider - its purpose is to collect information during the processing of business logic.
 */
export class BusinessProviderBase {
    constructor(providerName, loggingService) {
        this.loggingService = loggingService;
        this.providerName = providerName;
        this.loggingService.log(this.providerName, Severity.Information, `Running constructor for the [${this.providerName}].`);
    }
    /**
     * Use to handle an unexpected error in the application. The error should implement
     * the specified interface. The method will add a new [ServiceMessage] to the
     * specified [ServiceContext].
     * @param error An unexpected application error that implements the [Error] interface.
     *
     * interface Error {
     *  name: string;
     *  message: string;
     *  stack?: string;
     * }
     */
    handleUnexpectedError(error) {
        const message = new ServiceMessage(error.name, error.message)
            .WithDisplayToUser(true)
            .WithMessageType(MessageType.Error)
            .WithSource(this.providerName);
        const logItem = `${message.toString()}; ${error.stack}`;
        this.loggingService.log(this.providerName, Severity.Error, logItem);
        this.serviceContext.addMessage(message);
    }
    finishRequest(sourceName) {
        this.loggingService.log(this.providerName, Severity.Information, `Request for [${sourceName}] by ${this.providerName} is complete.`);
        if (this.serviceContext.hasErrors()) {
            this.loggingService.log(this.providerName, Severity.Information, `Preparing to write out the errors.`);
            this.serviceContext.Messages.filter((f) => f.DisplayToUser && f.MessageType === MessageType.Error).forEach((e) => this.loggingService.log(this.providerName, Severity.Error, e.toString()));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVzaW5lc3MtcHJvdmlkZXItYmFzZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9mb3VuZGF0aW9uL3NyYy9saWIvYnVzaW5lc3MtcHJvdmlkZXItYmFzZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXpEOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sb0JBQW9CO0lBSy9CLFlBQVksWUFBb0IsRUFBUyxjQUE4QjtRQUE5QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDckUsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQ3JCLElBQUksQ0FBQyxZQUFZLEVBQ2pCLFFBQVEsQ0FBQyxXQUFXLEVBQ3BCLGdDQUFnQyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQ3RELENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7O09BV0c7SUFDSCxxQkFBcUIsQ0FBQyxLQUFZO1FBQ2hDLE1BQU0sT0FBTyxHQUFHLElBQUksY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQzthQUMxRCxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7YUFDdkIsZUFBZSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7YUFDbEMsVUFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVqQyxNQUFNLE9BQU8sR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDeEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRXBFLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxhQUFhLENBQUMsVUFBa0I7UUFDOUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQ3JCLElBQUksQ0FBQyxZQUFZLEVBQ2pCLFFBQVEsQ0FBQyxXQUFXLEVBQ3BCLGdCQUFnQixVQUFVLFFBQVEsSUFBSSxDQUFDLFlBQVksZUFBZSxDQUNuRSxDQUFDO1FBQ0YsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUNyQixJQUFJLENBQUMsWUFBWSxFQUNqQixRQUFRLENBQUMsV0FBVyxFQUNwQixvQ0FBb0MsQ0FDckMsQ0FBQztZQUNGLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FDakMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLElBQUksQ0FBQyxDQUFDLFdBQVcsS0FBSyxXQUFXLENBQUMsS0FBSyxDQUM5RCxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ2QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUN6RSxDQUFDO1NBQ0g7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2dnaW5nU2VydmljZSB9IGZyb20gJ0BidWlsZG1vdGlvbi9sb2dnaW5nJztcbmltcG9ydCB7IFNldmVyaXR5IH0gZnJvbSAnQGJ1aWxkbW90aW9uL2xvZ2dpbmcnO1xuaW1wb3J0IHsgTWVzc2FnZVR5cGUgfSBmcm9tICcuL21vZGVscy9NZXNzYWdlVHlwZSc7XG5pbXBvcnQgeyBTZXJ2aWNlQ29udGV4dCB9IGZyb20gJy4vbW9kZWxzL1NlcnZpY2VDb250ZXh0JztcbmltcG9ydCB7IFNlcnZpY2VNZXNzYWdlIH0gZnJvbSAnLi9tb2RlbHMvU2VydmljZU1lc3NhZ2UnO1xuXG4vKipcbiAqIFVzZSB0aGUgYnVzaW5lc3MgcHJvdmlkZXIgYmFzZSBjbGFzcyB0byBhY2Nlc3MgY29tbW9uIGVsZW1lbnRzIG9mIHRoZSBidXNpbmVzcyBwcm92aWRlci5cbiAqXG4gKiBzZXJ2aWNlQ29udGV4dDogVGhpcyBpcyBpbml0aWFsaXplZCBmb3IgZWFjaCBpbnN0YW5jZSBvZiBhIGJ1c2luZXNzIHByb3ZpZGVyIC0gaXRzIHB1cnBvc2UgaXMgdG8gY29sbGVjdCBpbmZvcm1hdGlvbiBkdXJpbmcgdGhlIHByb2Nlc3Npbmcgb2YgYnVzaW5lc3MgbG9naWMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCdXNpbmVzc1Byb3ZpZGVyQmFzZSB7XG4gIHByb3ZpZGVyTmFtZTogc3RyaW5nO1xuICBzZXJ2aWNlQ29udGV4dCE6IFNlcnZpY2VDb250ZXh0O1xuICBhY2Nlc3NUb2tlbiE6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcm92aWRlck5hbWU6IHN0cmluZywgcHVibGljIGxvZ2dpbmdTZXJ2aWNlOiBMb2dnaW5nU2VydmljZSkge1xuICAgIHRoaXMucHJvdmlkZXJOYW1lID0gcHJvdmlkZXJOYW1lO1xuICAgIHRoaXMubG9nZ2luZ1NlcnZpY2UubG9nKFxuICAgICAgdGhpcy5wcm92aWRlck5hbWUsXG4gICAgICBTZXZlcml0eS5JbmZvcm1hdGlvbixcbiAgICAgIGBSdW5uaW5nIGNvbnN0cnVjdG9yIGZvciB0aGUgWyR7dGhpcy5wcm92aWRlck5hbWV9XS5gXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgdG8gaGFuZGxlIGFuIHVuZXhwZWN0ZWQgZXJyb3IgaW4gdGhlIGFwcGxpY2F0aW9uLiBUaGUgZXJyb3Igc2hvdWxkIGltcGxlbWVudFxuICAgKiB0aGUgc3BlY2lmaWVkIGludGVyZmFjZS4gVGhlIG1ldGhvZCB3aWxsIGFkZCBhIG5ldyBbU2VydmljZU1lc3NhZ2VdIHRvIHRoZVxuICAgKiBzcGVjaWZpZWQgW1NlcnZpY2VDb250ZXh0XS5cbiAgICogQHBhcmFtIGVycm9yIEFuIHVuZXhwZWN0ZWQgYXBwbGljYXRpb24gZXJyb3IgdGhhdCBpbXBsZW1lbnRzIHRoZSBbRXJyb3JdIGludGVyZmFjZS5cbiAgICpcbiAgICogaW50ZXJmYWNlIEVycm9yIHtcbiAgICogIG5hbWU6IHN0cmluZztcbiAgICogIG1lc3NhZ2U6IHN0cmluZztcbiAgICogIHN0YWNrPzogc3RyaW5nO1xuICAgKiB9XG4gICAqL1xuICBoYW5kbGVVbmV4cGVjdGVkRXJyb3IoZXJyb3I6IEVycm9yKTogdm9pZCB7XG4gICAgY29uc3QgbWVzc2FnZSA9IG5ldyBTZXJ2aWNlTWVzc2FnZShlcnJvci5uYW1lLCBlcnJvci5tZXNzYWdlKVxuICAgICAgLldpdGhEaXNwbGF5VG9Vc2VyKHRydWUpXG4gICAgICAuV2l0aE1lc3NhZ2VUeXBlKE1lc3NhZ2VUeXBlLkVycm9yKVxuICAgICAgLldpdGhTb3VyY2UodGhpcy5wcm92aWRlck5hbWUpO1xuXG4gICAgY29uc3QgbG9nSXRlbSA9IGAke21lc3NhZ2UudG9TdHJpbmcoKX07ICR7ZXJyb3Iuc3RhY2t9YDtcbiAgICB0aGlzLmxvZ2dpbmdTZXJ2aWNlLmxvZyh0aGlzLnByb3ZpZGVyTmFtZSwgU2V2ZXJpdHkuRXJyb3IsIGxvZ0l0ZW0pO1xuXG4gICAgdGhpcy5zZXJ2aWNlQ29udGV4dC5hZGRNZXNzYWdlKG1lc3NhZ2UpO1xuICB9XG5cbiAgZmluaXNoUmVxdWVzdChzb3VyY2VOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmxvZ2dpbmdTZXJ2aWNlLmxvZyhcbiAgICAgIHRoaXMucHJvdmlkZXJOYW1lLFxuICAgICAgU2V2ZXJpdHkuSW5mb3JtYXRpb24sXG4gICAgICBgUmVxdWVzdCBmb3IgWyR7c291cmNlTmFtZX1dIGJ5ICR7dGhpcy5wcm92aWRlck5hbWV9IGlzIGNvbXBsZXRlLmBcbiAgICApO1xuICAgIGlmICh0aGlzLnNlcnZpY2VDb250ZXh0Lmhhc0Vycm9ycygpKSB7XG4gICAgICB0aGlzLmxvZ2dpbmdTZXJ2aWNlLmxvZyhcbiAgICAgICAgdGhpcy5wcm92aWRlck5hbWUsXG4gICAgICAgIFNldmVyaXR5LkluZm9ybWF0aW9uLFxuICAgICAgICBgUHJlcGFyaW5nIHRvIHdyaXRlIG91dCB0aGUgZXJyb3JzLmBcbiAgICAgICk7XG4gICAgICB0aGlzLnNlcnZpY2VDb250ZXh0Lk1lc3NhZ2VzLmZpbHRlcihcbiAgICAgICAgKGYpID0+IGYuRGlzcGxheVRvVXNlciAmJiBmLk1lc3NhZ2VUeXBlID09PSBNZXNzYWdlVHlwZS5FcnJvclxuICAgICAgKS5mb3JFYWNoKChlKSA9PlxuICAgICAgICB0aGlzLmxvZ2dpbmdTZXJ2aWNlLmxvZyh0aGlzLnByb3ZpZGVyTmFtZSwgU2V2ZXJpdHkuRXJyb3IsIGUudG9TdHJpbmcoKSlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iXX0=