{"version":3,"file":"buildmotion-logging.js","sources":["../../../../libs/logging/src/lib/log-writers/log-writer.ts","../../../../libs/logging/src/lib/log-entry.ts","../../../../libs/logging/src/lib/severity.enum.ts","../../../../libs/logging/src/lib/logging.service.ts","../../../../libs/logging/src/lib/log-writers/console-writer.ts","../../../../libs/logging/src/lib/log-writers/data-dog-writer.service.ts","../../../../libs/logging/src/lib/logging.module.ts","../../../../libs/logging/src/lib/logging.service.config.ts","../../../../libs/logging/src/lib/logging.service.mock.ts","../../../../libs/logging/src/buildmotion-logging.ts"],"sourcesContent":["import { IsNotNullOrUndefined, IsTrue, StringIsNotNullEmptyRange, ValidationContext } from '@buildmotion/rules-engine';\nimport { noop } from 'rxjs';\nimport { ILogEntry } from '../i-log-entry';\nimport { ILogWriter } from './i-log-writer';\n\nexport abstract class LogWriter implements ILogWriter {\n  hasWriter!: boolean;\n  targetEntry!: ILogEntry;\n\n  /**\n   * Use this method to execute the write process for the\n   * specified [Log Entry] item.\n   *\n   * Using the [template method] design pattern.\n   */\n  execute(): void {\n    this.setup();\n    if (this.validateEntry()) {\n      this.write();\n    }\n    this.finish();\n  }\n\n  /**\n   * Use to perform an setup or configuration of the [writer].\n   * The [setup] method runs on all executions of the writer - and\n   * is called before the [write] method.\n   */\n  public abstract setup(): void;\n\n  /**\n   * Use to validate the [log entry] before attempting to write\n   * using the specified [log writer].\n   *\n   * Returns a [false] boolean to indicate the item is not valid.\n   */\n  public validateEntry(): boolean {\n    const validationContext = new ValidationContext();\n    validationContext.addRule(new IsTrue('LogWriterExists', 'The log writer is not configured.', this.hasWriter));\n    validationContext.addRule(new IsNotNullOrUndefined('EntryIsNotNull', 'The entry cannot be null.', this.targetEntry));\n    validationContext.addRule(new StringIsNotNullEmptyRange('SourceIsRequired', 'The entry source is not valid.', this.targetEntry.source, 1, 100));\n    validationContext.addRule(new StringIsNotNullEmptyRange('MessageIsValid', 'The message is required for the [Log Entry].', this.targetEntry.message, 1, 2000));\n    validationContext.addRule(new IsNotNullOrUndefined('TimestampIsRequired', 'The timestamp must be a valid DateTime value.', this.targetEntry.timestamp));\n\n    return validationContext.renderRules().isValid;\n  }\n\n  /**\n   * Use to implement the actual write of the [Log Entry].\n   */\n  public abstract write(): void;\n\n  /**\n   * Use to finish the process or clean-up any resources.\n   */\n  public finish(): void {\n    noop();\n  }\n}\n","import { ILogEntry } from './i-log-entry';\nimport { Severity } from './severity.enum';\n\nexport class LogEntry implements ILogEntry {\n  application: string;\n  source: string;\n  severity: Severity;\n  message: string;\n  timestamp: Date;\n  tags?: string[];\n\n  constructor(application: string, source: string, severity: Severity, message: string, tags?: string[] | undefined) {\n    this.application = application;\n    this.source = source;\n    this.severity = severity;\n    this.message = message;\n    this.timestamp = new Date(Date.now());\n    this.tags = tags;\n  }\n}\n","export enum Severity {\n  Information = 'Information',\n  Warning = 'Warning',\n  Error = 'Error',\n  Critical = 'Critical',\n  Debug = 'Debug',\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { ConfigurationService, IConfiguration, LoggingConfig } from '@buildmotion/configuration';\nimport { Guid } from 'guid-typescript';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { ILogEntry } from './i-log-entry';\nimport { LogEntry } from './log-entry';\nimport { Severity } from './severity.enum';\n\nexport interface ILoggingService {\n  serviceName: string;\n  source: string;\n  severity: Severity;\n  message: string;\n  timestamp: Date;\n  applicationName: string;\n  version: string;\n  isProduction: boolean;\n  config: LoggingConfig;\n  id: Guid;\n  logEntries$: Observable<ILogEntry>;\n  // configService: ConfigurationService;\n  handleSettings(settings: IConfiguration): void;\n  log(source: string, severity: Severity, message: string, tags?: string[]): void;\n}\n@Injectable()\nexport class LoggingService implements ILoggingService {\n  serviceName = 'LoggingService';\n  source!: string;\n  severity!: Severity;\n  message!: string;\n  timestamp: Date = new Date();\n  applicationName!: string;\n  version!: string;\n  isProduction!: boolean;\n  config!: LoggingConfig;\n  id: Guid = Guid.create();\n\n  private logEntriesSubject: ReplaySubject<ILogEntry> = new ReplaySubject<ILogEntry>(1);\n  public readonly logEntries$: Observable<ILogEntry> = this.logEntriesSubject.asObservable();\n\n  /**\n   * The [LoggingService] constructor.\n   */\n  constructor(@Optional() public configService: ConfigurationService) {\n    this.log(this.serviceName, Severity.Information, `Starting logging service [${this.id.toString()}] at: ${this.timestamp}`);\n    this.initializeService(configService);\n  }\n\n  /**\n   * Use to initialize the logging service. Retrieves\n   * application configuration settings.\n   *\n   * @param configService contains the configuration settings for the application\n   */\n  private initializeService(configService: ConfigurationService) {\n    if (configService) {\n      this.configService.settings$.pipe(take(1)).subscribe((settings) => this.handleSettings(settings));\n    }\n  }\n\n  /**\n   * Use to handle settings from the configuration service.\n   * @param settings\n   */\n  handleSettings(settings: IConfiguration) {\n    if (settings) {\n      this.config = settings.loggingConfig;\n\n      this.applicationName = this.config && this.config.applicationName ? this.config.applicationName : 'Angular';\n      this.isProduction = this.config && this.config.isProduction ? this.config.isProduction : false;\n    }\n  }\n\n  /**\n   * Use this method to send a log message with severity and source information\n   * to the application's logger.\n   *\n   * If the application environment mode is [Production], the information will\n   * be sent to a centralized repository.\n   *\n   * @param source\n   * @param severity\n   * @param message\n   */\n  log(source: string, severity: Severity, message: string, tags?: string[]) {\n    this.source = this.applicationName !== source ? `${this.applicationName}.${source}` : this.applicationName;\n    this.severity = severity;\n    this.message = message;\n    this.timestamp = new Date();\n\n    if (tags) {\n      tags.push(`LoggerId:${this.id.toString()}`);\n    } else {\n      tags = [`LoggerId:${this.id.toString()}`];\n    }\n\n    const logEntry = new LogEntry(this.applicationName, this.source, this.severity, this.message, tags);\n    this.logEntriesSubject.next(logEntry);\n  }\n}\n","import { ILogEntry } from '../i-log-entry';\nimport { Injectable } from '@angular/core';\nimport { LogWriter } from './log-writer';\nimport { LoggingService } from '../logging.service';\nimport { Severity } from '../severity.enum';\nimport { noop } from 'rxjs';\n\n/**\n * Use this writer to log information to the browser console.\n */\n@Injectable()\nexport class ConsoleWriter extends LogWriter {\n  constructor(private loggingService: LoggingService) {\n    super();\n    if (loggingService.config.isProduction === false) {\n      this.loggingService.logEntries$.subscribe((logEntry) => this.handleLogEntry(logEntry));\n    }\n  }\n\n  handleLogEntry(logEntry: ILogEntry) {\n    this.targetEntry = logEntry;\n    this.execute();\n  }\n\n  /**\n   * No setup required for the console writer.\n   */\n  public setup(): void {\n    noop();\n  }\n\n  /**\n   * Implementation of the abstract method. This will perform the\n   * actual `write` action for the specified writer.\n   */\n  public write(): void {\n    switch (this.targetEntry.severity) {\n      /* eslint-disable no-restricted-syntax */\n      /* eslint-disable no-console */\n      case Severity.Debug:\n        console.debug(this.targetEntry);\n        break;\n      case Severity.Information:\n        console.info(this.targetEntry);\n        break;\n      case Severity.Warning:\n        console.warn(this.targetEntry);\n        break;\n      case Severity.Error:\n        console.error(this.targetEntry);\n        break;\n      case Severity.Critical:\n        console.error(this.targetEntry);\n        break;\n      default:\n        break;\n      /* eslint-enable no-restricted-syntax */\n      /* eslint-enable no-console */\n    }\n  }\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { ConfigurationService, IConfiguration, IDataDogConfig } from '@buildmotion/configuration';\nimport { ILogEntry } from '../i-log-entry';\nimport { LoggingService } from '../logging.service';\nimport { LogWriter } from './log-writer';\nimport { datadogLogs } from '@datadog/browser-logs';\nimport { Severity } from '../severity.enum';\nimport { datadogRum } from '@datadog/browser-rum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataDogWriterService extends LogWriter {\n  config: IDataDogConfig | undefined;\n\n  constructor(\n    @Optional() private configService: ConfigurationService,\n    private loggingService: LoggingService,\n  ) {\n    super();\n    if (this.configService && this.loggingService) {\n      this.configService.settings$.subscribe((settings) =>\n        this.handleSettings(settings)\n      );\n      this.loggingService.logEntries$.subscribe((entry) =>\n        this.handleLogEntry(entry)\n      );\n    }\n  }\n\n  handleLogEntry(entry: ILogEntry) {\n    if (this.hasWriter) {\n      this.targetEntry = entry;\n      this.execute();\n    }\n  }\n\n  handleSettings(settings: IConfiguration) {\n    if (settings) {\n      this.config = settings.dataDogConfig;\n      this.hasWriter = true;\n      console.log(`Initializing [DataDog] writer for logging.`);\n\n      /**\n       * Use to initialize client-browser log transfer to DataDog;\n       */\n      datadogLogs.init({\n        clientToken: this.config.logs.clientToken,\n        site: this.config.logs.site,\n        forwardErrorsToLogs: this.config.logs.forwardErrorsToLogs,\n        sampleRate: this.config.logs.sampleRate\n      });\n\n      /**\n       * Note: The trackInteractions initialization parameter enables the automatic collection of user\n       * clicks in your application.Sensitive and private data contained on your pages may be included to\n       * identify the elements interacted with.\n       *\n       * version: Specify a version number to identify the deployed version of your application in Datadog\n       */\n      datadogRum.init({\n        applicationId: this.config.realUserMonitoring.applicationId,\n        clientToken: this.config.realUserMonitoring.clientToken,\n        site: this.config.realUserMonitoring.site,\n        service: this.config.realUserMonitoring.service,\n        env: this.config.realUserMonitoring.env,\n        // Specify a version number to identify the deployed version of your application in Datadog\n        version: this.config.realUserMonitoring.version,\n        sampleRate: this.config.realUserMonitoring.sampleRate,\n        trackInteractions: this.config.realUserMonitoring.trackInteractions\n      });\n    }\n  }\n\n  /**\n   * Use to perform an setup or configuration of the [writer].\n   * The [setup] method runs on all executions of the writer - and\n   * is called before the [write] method.\n   */\n  public setup(): void {\n    if (this.hasWriter && this.config && this.targetEntry) {\n      try {\n        // FIXME: DO WE NEED TO SOMETHING HERE? Nope.\n      } catch (error) {\n        if (error && error instanceof Error) {\n          const message = `${this.targetEntry.application}.DataDogWriter: ${error?.message ?? ''}, ${error?.stack ?? error.stack}`;\n          console.error(message);\n        }\n      }\n    }\n  }\n\n  /**\n   * Use to implement the actual write of the [Log Entry].\n   */\n  public write(): void {\n    if (this.targetEntry) {\n      switch (this.targetEntry.severity) {\n        case Severity.Information:\n          datadogLogs.logger.info(this.targetEntry.application, { ...this.targetEntry });\n          break;\n        case Severity.Warning:\n          datadogLogs.logger.warn(this.targetEntry.application, { ...this.targetEntry });\n          break;\n        case Severity.Error:\n          datadogLogs.logger.error(this.targetEntry.application, { ...this.targetEntry });\n          break;\n        case Severity.Critical:\n          datadogLogs.logger.error(this.targetEntry.application, { ...this.targetEntry });\n          break;\n        case Severity.Debug:\n          datadogLogs.logger.info(this.targetEntry.application, { ...this.targetEntry });\n          break;\n        default:\n          datadogLogs.logger.info(this.targetEntry.application, { ...this.targetEntry });\n      }\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n})\nexport class LoggingModule {}\n","export class LoggingServiceConfig {\n  public applicationName = 'APP_NAME_NOT_PROVIDED';\n  public version!: string;\n}\n","import { Injectable } from '@angular/core';\nimport { IConfiguration, ILoggingConfig, LoggingConfig } from '@buildmotion/configuration';\nimport { Guid } from 'guid-typescript';\nimport { Subject } from 'rxjs';\nimport { ILogEntry } from './i-log-entry';\nimport { ILoggingService } from './logging.service';\nimport { Severity } from './severity.enum';\n\n\n@Injectable()\nexport class LoggingServiceMock implements ILoggingService {\n  applicationName = 'application';\n  config!: LoggingConfig;\n  configService!: undefined;\n  handleSettings!: () => { unknown: any };\n  id: Guid = Guid.create();\n  isProduction!: boolean;\n  logEntries$: Subject<ILogEntry> = new Subject<ILogEntry>();\n  loggingConfig!: ILoggingConfig;\n  message!: string;\n  serviceName = 'LoggingServiceMock';\n  severity!: Severity;\n  source!: string;\n  stack!: string;\n  timestamp!: Date;\n  version = '0.0.0';\n\n  setupConfiguration(settings: IConfiguration) {\n    if (settings) {\n      this.log(this.serviceName, Severity.Information, `Logging for [${settings.loggingConfig.applicationName}].`);\n    }\n    this.isProduction = false;\n  }\n\n  log(source: string, severity: Severity, message: string) {\n    this.source = source;\n    this.severity = severity;\n    this.message = message;\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}