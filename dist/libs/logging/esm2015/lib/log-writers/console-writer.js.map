{"version":3,"file":"console-writer.js","sourceRoot":"","sources":["../../../../../../libs/logging/src/lib/log-writers/console-writer.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AACpD,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;;;AAE5B;;GAEG;AAEH,MAAM,OAAO,aAAc,SAAQ,SAAS;IAC1C,YAAoB,cAA8B;QAChD,KAAK,EAAE,CAAC;QADU,mBAAc,GAAd,cAAc,CAAgB;QAEhD,IAAI,cAAc,CAAC,MAAM,CAAC,YAAY,KAAK,KAAK,EAAE;YAChD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;SACxF;IACH,CAAC;IAED,cAAc,CAAC,QAAmB;QAChC,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QAC5B,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,KAAK;QACV,IAAI,EAAE,CAAC;IACT,CAAC;IAED;;;OAGG;IACI,KAAK;QACV,QAAQ,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;YACjC,yCAAyC;YACzC,+BAA+B;YAC/B,KAAK,QAAQ,CAAC,KAAK;gBACjB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAChC,MAAM;YACR,KAAK,QAAQ,CAAC,WAAW;gBACvB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC/B,MAAM;YACR,KAAK,QAAQ,CAAC,OAAO;gBACnB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC/B,MAAM;YACR,KAAK,QAAQ,CAAC,KAAK;gBACjB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAChC,MAAM;YACR,KAAK,QAAQ,CAAC,QAAQ;gBACpB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAChC,MAAM;YACR;gBACE,MAAM;YACR,wCAAwC;YACxC,8BAA8B;SAC/B;IACH,CAAC;;2GAhDU,aAAa;+GAAb,aAAa;4FAAb,aAAa;kBADzB,UAAU","sourcesContent":["import { ILogEntry } from '../i-log-entry';\nimport { Injectable } from '@angular/core';\nimport { LogWriter } from './log-writer';\nimport { LoggingService } from '../logging.service';\nimport { Severity } from '../severity.enum';\nimport { noop } from 'rxjs';\n\n/**\n * Use this writer to log information to the browser console.\n */\n@Injectable()\nexport class ConsoleWriter extends LogWriter {\n  constructor(private loggingService: LoggingService) {\n    super();\n    if (loggingService.config.isProduction === false) {\n      this.loggingService.logEntries$.subscribe((logEntry) => this.handleLogEntry(logEntry));\n    }\n  }\n\n  handleLogEntry(logEntry: ILogEntry) {\n    this.targetEntry = logEntry;\n    this.execute();\n  }\n\n  /**\n   * No setup required for the console writer.\n   */\n  public setup(): void {\n    noop();\n  }\n\n  /**\n   * Implementation of the abstract method. This will perform the\n   * actual `write` action for the specified writer.\n   */\n  public write(): void {\n    switch (this.targetEntry.severity) {\n      /* eslint-disable no-restricted-syntax */\n      /* eslint-disable no-console */\n      case Severity.Debug:\n        console.debug(this.targetEntry);\n        break;\n      case Severity.Information:\n        console.info(this.targetEntry);\n        break;\n      case Severity.Warning:\n        console.warn(this.targetEntry);\n        break;\n      case Severity.Error:\n        console.error(this.targetEntry);\n        break;\n      case Severity.Critical:\n        console.error(this.targetEntry);\n        break;\n      default:\n        break;\n      /* eslint-enable no-restricted-syntax */\n      /* eslint-enable no-console */\n    }\n  }\n}\n"]}