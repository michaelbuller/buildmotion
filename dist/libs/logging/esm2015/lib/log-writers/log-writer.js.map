{"version":3,"file":"log-writer.js","sourceRoot":"","sources":["../../../../../../libs/logging/src/lib/log-writers/log-writer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,EAAE,yBAAyB,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AACvH,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAI5B,MAAM,OAAgB,SAAS;IAI7B;;;;;OAKG;IACH,OAAO;QACL,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE;YACxB,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;QACD,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IASD;;;;;OAKG;IACI,aAAa;QAClB,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC;QAClD,iBAAiB,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,iBAAiB,EAAE,mCAAmC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAC9G,iBAAiB,CAAC,OAAO,CAAC,IAAI,oBAAoB,CAAC,gBAAgB,EAAE,2BAA2B,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QACrH,iBAAiB,CAAC,OAAO,CAAC,IAAI,yBAAyB,CAAC,kBAAkB,EAAE,gCAAgC,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QAChJ,iBAAiB,CAAC,OAAO,CAAC,IAAI,yBAAyB,CAAC,gBAAgB,EAAE,8CAA8C,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QAC9J,iBAAiB,CAAC,OAAO,CAAC,IAAI,oBAAoB,CAAC,qBAAqB,EAAE,+CAA+C,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;QAExJ,OAAO,iBAAiB,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC;IACjD,CAAC;IAOD;;OAEG;IACI,MAAM;QACX,IAAI,EAAE,CAAC;IACT,CAAC;CACF","sourcesContent":["import { IsNotNullOrUndefined, IsTrue, StringIsNotNullEmptyRange, ValidationContext } from '@buildmotion/rules-engine';\nimport { noop } from 'rxjs';\nimport { ILogEntry } from '../i-log-entry';\nimport { ILogWriter } from './i-log-writer';\n\nexport abstract class LogWriter implements ILogWriter {\n  hasWriter!: boolean;\n  targetEntry!: ILogEntry;\n\n  /**\n   * Use this method to execute the write process for the\n   * specified [Log Entry] item.\n   *\n   * Using the [template method] design pattern.\n   */\n  execute(): void {\n    this.setup();\n    if (this.validateEntry()) {\n      this.write();\n    }\n    this.finish();\n  }\n\n  /**\n   * Use to perform an setup or configuration of the [writer].\n   * The [setup] method runs on all executions of the writer - and\n   * is called before the [write] method.\n   */\n  public abstract setup(): void;\n\n  /**\n   * Use to validate the [log entry] before attempting to write\n   * using the specified [log writer].\n   *\n   * Returns a [false] boolean to indicate the item is not valid.\n   */\n  public validateEntry(): boolean {\n    const validationContext = new ValidationContext();\n    validationContext.addRule(new IsTrue('LogWriterExists', 'The log writer is not configured.', this.hasWriter));\n    validationContext.addRule(new IsNotNullOrUndefined('EntryIsNotNull', 'The entry cannot be null.', this.targetEntry));\n    validationContext.addRule(new StringIsNotNullEmptyRange('SourceIsRequired', 'The entry source is not valid.', this.targetEntry.source, 1, 100));\n    validationContext.addRule(new StringIsNotNullEmptyRange('MessageIsValid', 'The message is required for the [Log Entry].', this.targetEntry.message, 1, 2000));\n    validationContext.addRule(new IsNotNullOrUndefined('TimestampIsRequired', 'The timestamp must be a valid DateTime value.', this.targetEntry.timestamp));\n\n    return validationContext.renderRules().isValid;\n  }\n\n  /**\n   * Use to implement the actual write of the [Log Entry].\n   */\n  public abstract write(): void;\n\n  /**\n   * Use to finish the process or clean-up any resources.\n   */\n  public finish(): void {\n    noop();\n  }\n}\n"]}