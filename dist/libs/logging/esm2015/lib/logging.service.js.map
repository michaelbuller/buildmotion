{"version":3,"file":"logging.service.js","sourceRoot":"","sources":["../../../../../libs/logging/src/lib/logging.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport { ConfigurationService, IConfiguration, LoggingConfig } from '@buildmotion/configuration';\nimport { Guid } from 'guid-typescript';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { ILogEntry } from './i-log-entry';\nimport { LogEntry } from './log-entry';\nimport { Severity } from './severity.enum';\n\nexport interface ILoggingService {\n  serviceName: string;\n  source: string;\n  severity: Severity;\n  message: string;\n  timestamp: Date;\n  applicationName: string;\n  version: string;\n  isProduction: boolean;\n  config: LoggingConfig;\n  id: Guid;\n  logEntries$: Observable<ILogEntry>;\n  // configService: ConfigurationService;\n  handleSettings(settings: IConfiguration): void;\n  log(source: string, severity: Severity, message: string, tags?: string[]): void;\n}\n@Injectable()\nexport class LoggingService implements ILoggingService {\n  serviceName = 'LoggingService';\n  source!: string;\n  severity!: Severity;\n  message!: string;\n  timestamp: Date = new Date();\n  applicationName!: string;\n  version!: string;\n  isProduction!: boolean;\n  config!: LoggingConfig;\n  id: Guid = Guid.create();\n\n  private logEntriesSubject: ReplaySubject<ILogEntry> = new ReplaySubject<ILogEntry>(1);\n  public readonly logEntries$: Observable<ILogEntry> = this.logEntriesSubject.asObservable();\n\n  /**\n   * The [LoggingService] constructor.\n   */\n  constructor(@Optional() public configService: ConfigurationService) {\n    this.log(this.serviceName, Severity.Information, `Starting logging service [${this.id.toString()}] at: ${this.timestamp}`);\n    this.initializeService(configService);\n  }\n\n  /**\n   * Use to initialize the logging service. Retrieves\n   * application configuration settings.\n   *\n   * @param configService contains the configuration settings for the application\n   */\n  private initializeService(configService: ConfigurationService) {\n    if (configService) {\n      this.configService.settings$.pipe(take(1)).subscribe((settings) => this.handleSettings(settings));\n    }\n  }\n\n  /**\n   * Use to handle settings from the configuration service.\n   * @param settings\n   */\n  handleSettings(settings: IConfiguration) {\n    if (settings) {\n      this.config = settings.loggingConfig;\n\n      this.applicationName = this.config && this.config.applicationName ? this.config.applicationName : 'Angular';\n      this.isProduction = this.config && this.config.isProduction ? this.config.isProduction : false;\n    }\n  }\n\n  /**\n   * Use this method to send a log message with severity and source information\n   * to the application's logger.\n   *\n   * If the application environment mode is [Production], the information will\n   * be sent to a centralized repository.\n   *\n   * @param source\n   * @param severity\n   * @param message\n   */\n  log(source: string, severity: Severity, message: string, tags?: string[]) {\n    this.source = this.applicationName !== source ? `${this.applicationName}.${source}` : this.applicationName;\n    this.severity = severity;\n    this.message = message;\n    this.timestamp = new Date();\n\n    if (tags) {\n      tags.push(`LoggerId:${this.id.toString()}`);\n    } else {\n      tags = [`LoggerId:${this.id.toString()}`];\n    }\n\n    const logEntry = new LogEntry(this.applicationName, this.source, this.severity, this.message, tags);\n    this.logEntriesSubject.next(logEntry);\n  }\n}\n"]}